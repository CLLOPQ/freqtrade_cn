{
  "advanced-orderflow.md": {
    "hash": "7199456caccf521345becfe603798d83",
    "content": "# 订单流数据\n\n本指南将逐步介绍如何在Freqtrade中利用公共交易数据进行高级订单流分析。\n\n!!! Warning \"实验性功能\"\n    订单流功能目前处于测试阶段（beta），未来版本可能会有变更。如有任何问题或反馈，请在 [Freqtrade GitHub 仓库](https://github.com/freqtrade/freqtrade/issues) 报告。\n    目前此功能尚未与freqAI一起测试 - 现阶段不建议将这两个功能结合使用。\n\n!!! Warning \"性能\"\n    订单流需要原始交易数据。此类数据量较大，当Freqtrade需要下载过去X根K线的交易数据时，可能会导致初始启动变慢。此外，启用此功能会增加内存使用量。请确保有足够的系统资源。\n\n## 开始使用\n\n### 启用公共交易数据\n\n在您的 `config.json` 文件中，将 `exchange` 部分下的 `use_public_trades` 选项设置为 true。",
    "timestamp": "2025-07-31T05:36:49.243090"
  },
  "data-analysis.md": {
    "hash": "68a2d6ebfca103fb4213745830eb094e",
    "content": "!!! 注意\n    本节为完整起见提供，Freqtrade团队不会为该设置的问题提供全面支持，并建议直接在虚拟环境中安装Jupyter，因为这是让Jupyter笔记本启动和运行的最简单方法。有关此设置的帮助，请参考 [Project Jupyter](https://jupyter.org/) [文档](https://jupyter.org/documentation) 或 [帮助渠道](https://jupyter.org/community)。\n\n!!! 警告\n    有些任务在笔记本中运行效果不佳。例如，任何使用异步执行的操作对Jupyter来说都是问题。此外，Freqtrade的主要入口是shell命令行界面，因此在笔记本中使用纯Python会绕过为辅助函数提供所需对象和参数的参数。您可能需要手动设置这些值或创建预期的对象。\n\n## 推荐工作流\n\n| 任务               | 工具           |\n  ---                | ---            |\n机器人操作          | CLI            |\n重复性任务          | Shell脚本      |\n数据分析与可视化    | 笔记本         |\n\n1. 使用CLI来\n\n    * 下载历史数据\n    * 运行回测\n    * 使用实时数据运行\n    * 导出结果\n\n1. 将这些操作收集到Shell脚本中\n\n    * 保存带参数的复杂命令\n    * 执行多步骤操作\n    * 自动化测试策略和准备分析数据\n\n1. 使用笔记本进行\n\n    * 可视化数据\n    * 处理和绘图以生成见解\n\n## 实用示例代码片段\n\n### 切换到项目根目录\n\nJupyter笔记本从笔记本所在目录执行。以下代码片段搜索项目根目录，确保相对路径一致。",
    "timestamp": "2025-07-31T05:36:52.054715"
  },
  "bot-usage.md": {
    "hash": "43c3af4d979e9da3db44498f516b41fa",
    "content": "# 启动机器人\n\n本页解释机器人的不同参数以及如何运行它。\n\n!!! Note\n    如果您使用了 `setup.sh`，在运行 freqtrade 命令之前不要忘记激活虚拟环境（`source .venv/bin/activate`）。\n\n!!! Warning \"时钟同步\"\n    运行机器人的系统时钟必须准确，并足够频繁地同步到 NTP 服务器，以避免与交易所通信时出现问题。\n\n## 机器人命令\n\n--8<-- \"commands/main.md\"\n\n### 机器人交易命令\n\n--8<-- \"commands/trade.md\"\n\n### 如何指定要使用的配置文件？\n\n机器人允许您通过 `-c/--config` 命令行选项选择要使用的配置文件：",
    "timestamp": "2025-07-31T05:36:54.458114"
  },
  "deprecated.md": {
    "hash": "33b8d4b13ed82516c4caa11f6273c154",
    "content": "# 已弃用功能\n\n本页面包含被机器人开发团队声明为已弃用（DEPRECATED）且不再支持的命令行参数、配置参数和机器人功能的说明。请避免在您的配置中使用这些功能。\n\n## 已移除功能\n\n### `--refresh-pairs-cached` 命令行选项\n\n`--refresh-pairs-cached` 用于在回测、超参数优化（hyperopt）和Edge中刷新回测用的K线数据。由于该选项导致了较多混淆，且会减慢回测速度（同时并非回测的必要部分），现已被单独拆分为 `freqtrade download-data` 子命令。\n\n此命令行选项在2019.7-dev（开发分支）中被弃用，并在2019.9版本中移除。\n\n### `--dynamic-whitelist` 命令行选项\n\n此命令行选项于2018年被弃用，并在freqtrade 2019.6-dev（开发分支）及2019.7版本中移除。请改用[交易对列表](plugins.md#pairlists-and-pairlist-handlers)。\n\n### `--live` 命令行选项\n\n`--live` 用于在回测时下载最新的tick数据。但该选项仅能下载最新的500根K线，无法获取高质量的回测数据。在2019-7-dev（开发分支）及freqtrade 2019.8版本中被移除。\n\n### `ticker_interval`（现为 `timeframe`）\n\n对 `ticker_interval` 术语的支持在2020.6版本中被弃用，转而使用 `timeframe`，相关兼容代码在2022.3版本中移除。\n\n### 允许多个交易对列表按顺序运行\n\n配置中先前的 `\"pairlist\"` 部分已被移除，取而代之的是 `\"pairlists\"`——一个用于指定交易对列表序列的列表。\n\n旧的配置参数部分（`\"pairlist\"`）在2019.11版本中被弃用，并在2020.4版本中移除。\n\n### 交易量交易对列表中 bidVolume 和 askVolume 的弃用\n\n由于只有 quoteVolume 可在不同资产间比较，其他选项（bidVolume、askVolume）在2020.4版本中被弃用，并在2020.9版本中移除。\n\n### 使用订单簿阶梯确定退出价格\n\n过去可通过 `order_book_min` 和 `order_book_max` 来步进订单簿并尝试寻找下一个ROI区间，以尽早挂出卖出订单。但该功能会增加风险且无实际益处，为便于维护，在2021.7版本中被移除。\n\n### 传统超参数优化模式\n\n使用单独超参数优化文件的方式在2021.4版本中被弃用，并在2021.9版本中移除。请切换至新的[参数化策略](hyperopt.md)以使用新的超参数优化界面。\n\n## V2与V3策略的变化\n\n隔离期货/做空交易功能在2022.4版本中引入。这需要对配置设置、策略接口等进行重大变更。\n\n我们已尽力保持与现有策略的兼容性，因此如果您只想继续在现货市场使用freqtrade，无需进行任何更改。尽管未来我们可能会放弃对当前接口的支持，但会单独发布公告并提供适当的过渡期。\n\n请参考[策略迁移](strategy_migration.md)指南，将您的策略迁移至新格式以使用新功能。\n\n### Web钩子 - 2022.4版本的变更\n\n#### `buy_tag` 已重命名为 `enter_tag`\n\n此变更仅适用于您的策略及可能的web钩子。我们将保留1-2个版本的兼容层（因此 `buy_tag` 和 `enter_tag` 仍可正常工作），但之后web钩子中将不再支持 `buy_tag`。\n\n#### 命名变更\n\nWeb钩子术语从“sell”改为“exit”，从“buy”改为“entry”，同时移除了“webhook”前缀：\n\n* `webhookbuy`、`webhookentry` -> `entry`\n* `webhookbuyfill`、`webhookentryfill` -> `entry_fill`\n* `webhookbuycancel`、`webhookentrycancel` -> `entry_cancel`\n* `webhooksell`、`webhookexit` -> `exit`\n* `webhooksellfill`、`webhookexitfill` -> `exit_fill`\n* `webhooksellcancel`、`webhookexitcancel` -> `exit_cancel`\n\n## `populate_any_indicators` 方法的移除\n\n2023.3版本移除了 `populate_any_indicators` 方法，转而支持将特征工程和目标函数拆分为独立方法。请阅读[迁移文档](strategy_migration.md#freqai-strategy)了解详细信息。\n\n## 配置中 `protections` 的移除\n\n通过 `\"protections\": [],` 在配置中设置保护机制的方式在2024.10版本中移除，此前已发出超过3年的弃用警告。\n\n## HDF5数据存储\n\n使用HDF5作为数据存储格式在2024.12版本中被弃用，并在2025.1版本中移除。建议切换至Feather数据格式。\n\n请在更新前使用[`convert-data`子命令](data-download.md#sub-command-convert-data)将现有数据转换为支持的格式之一。\n\n## 通过配置文件配置高级日志\n\n通过 `--logfile systemd` 和 `--logfile journald` 分别配置syslog和journald的方式在2025.3版本中被弃用。请改用基于配置的[日志设置](advanced-setup.md#advanced-logging)。\n\n## Edge模块的移除\n\nEdge模块在2023.9版本中被弃用，并在2025.6版本中移除。Edge的所有功能均已删除，配置Edge将导致错误。",
    "timestamp": "2025-07-31T05:36:56.866783"
  },
  "advanced-hyperopt.md": {
    "hash": "8e127c7ec1f7896205e2d5593394f67d",
    "content": "目前，参数如下：\n\n* `results`：包含结果交易的DataFrame。\n    results中可用的列如下（对应回测时使用 `--export trades` 导出的文件）：  \n    `pair, profit_ratio, profit_abs, open_date, open_rate, fee_open, close_date, close_rate, fee_close, amount, trade_duration, is_open, exit_reason, stake_amount, min_rate, max_rate, stop_loss_ratio, stop_loss_abs`\n* `trade_count`：交易数量（与 `len(results)` 相同）\n* `min_date`：所用时间范围的开始日期\n* `max_date`：所用时间范围的结束日期\n* `config`：使用的配置对象（注意：如果某些策略相关参数是超参数优化空间的一部分，此处可能不会更新）。\n* `processed`：DataFrame字典，以交易对为键，包含用于回测的数据。\n* `backtest_stats`：回测统计数据，格式与回测文件的 \"strategy\" 子结构相同。可用字段可在 `optimize_reports.py` 中的 `generate_strategy_stats()` 中查看。\n* `starting_balance`：用于回测的初始资金。\n\n此函数需要返回一个浮点数（`float`）。较小的数值表示更好的结果。参数和权重平衡由您决定。\n\n!!! Note\n    此函数每个epoch调用一次 - 因此请确保尽可能优化此函数，以免不必要地减慢超参数优化速度。\n\n!!! Note \"`*args` 和 `**kwargs`\"\n    请在接口中保留 `*args` 和 `**kwargs` 参数，以便我们将来扩展此接口。\n\n## 覆盖预定义空间\n\n要覆盖预定义空间（`roi_space`、`generate_roi_table`、`stoploss_space`、`trailing_space`、`max_open_trades_space`），请定义一个名为 `HyperOpt` 的嵌套类，并按如下方式定义所需空间：",
    "timestamp": "2025-07-31T05:37:06.028772"
  },
  "advanced-backtesting.md": {
    "hash": "638d0c578208bb45e3ed72f13c700d13",
    "content": "这将告诉Freqtrade输出一个序列化字典（pickled dictionary），包含策略、交易对以及对应产生入场和出场信号的K线数据DataFrame。根据策略产生的入场次数，此文件可能会变得相当大，因此请定期检查`user_data/backtest_results`文件夹并删除旧的导出文件。\n\n在运行下一次回测之前，请确保删除旧的回测结果，或使用`--cache none`选项运行回测，以确保不使用缓存结果。\n\n如果一切顺利，你现在应该在`user_data/backtest_results`文件夹中看到`backtest-result-{timestamp}_signals.pkl`和`backtest-result-{timestamp}_exited.pkl`文件。\n\n要分析入场/出场标签，我们需要使用`freqtrade backtesting-analysis`命令，并提供`--analysis-groups`选项及空格分隔的参数：",
    "timestamp": "2025-07-31T05:37:08.405140"
  },
  "bot-basics.md": {
    "hash": "cdf9bd353b6b15aad234f0880debb5ed",
    "content": "# Freqtrade 基础知识\n\n本页为您提供有关Freqtrade工作原理和操作的一些基本概念。\n\n## Freqtrade 术语表\n\n* **策略 (Strategy)**: 您的交易策略，告诉机器人该做什么。\n* **交易 (Trade)**: 未平仓头寸。\n* **未完成订单 (Open Order)**: 当前已在交易所下达但尚未完成的订单。\n* **交易对 (Pair)**: 可交易的货币对，通常格式为基础货币/报价货币（例如现货的`XRP/USDT`，期货的`XRP/USDT:USDT`）。\n* **时间周期 (Timeframe)**: 使用的K线周期（例如`\"5m\"`表示5分钟，`\"1h\"`表示1小时，...）。\n* **指标 (Indicators)**: 技术指标（SMA、EMA、RSI等）。\n* **限价订单 (Limit order)**: 以设定的限价或更优价格执行的订单。\n* **市价订单 (Market order)**: 保证成交的订单，价格可能因订单大小而变动。\n* **当前利润 (Current Profit)**: 该交易当前未实现的浮动利润。主要用于机器人内部和用户界面。\n* **已实现利润 (Realized Profit)**: 已实现的利润。仅在结合[部分平仓](strategy-callbacks.md#adjust-trade-position)时相关——该文档也解释了此利润的计算逻辑。\n* **总利润 (Total Profit)**: 已实现利润和未实现利润的总和。相对值（%）是相对于该交易的总投资计算的。\n\n## 费用处理\n\nFreqtrade的所有利润计算均包含费用。在回测/超参数优化/模拟交易模式下，使用交易所默认费用（交易所最低层级费率）。在实盘操作中，使用交易所实际收取的费用（包括BNB折扣等）。\n\n## 交易对命名\n\nFreqtrade遵循[ccxt命名约定](https://docs.ccxt.com/#/README?id=consistency-of-base-and-quote-currencies)来命名货币对。\n在错误的市场中使用错误的命名约定通常会导致机器人无法识别交易对，通常会产生诸如“该交易对不可用”之类的错误。\n\n### 现货交易对命名\n\n现货交易对的命名格式为`基础货币/报价货币`（例如`ETH/USDT`）。\n\n### 期货交易对命名\n\n期货交易对的命名格式为`基础货币/报价货币:结算货币`（例如`ETH/USDT:USDT`）。\n\n## 机器人执行逻辑\n\n以模拟交易或实盘模式启动Freqtrade（使用`freqtrade trade`命令）将启动机器人并开始机器人迭代循环。\n这也会运行`bot_start()`回调函数。\n\n默认情况下，机器人循环每几秒运行一次（`internals.process_throttle_secs`），并执行以下操作：\n\n* 从持久化存储中获取未平仓交易。\n* 计算当前可交易对列表。\n* 下载交易对列表的OHLCV数据，包括所有[信息性交易对](strategy-customization.md#get-data-for-non-tradeable-pairs)。  \n  此步骤每个K线只执行一次，以避免不必要的网络流量。\n* 调用`bot_loop_start()`策略回调函数。\n* 按交易对分析策略。\n  * 调用`populate_indicators()`\n  * 调用`populate_entry_trend()`\n  * 调用`populate_exit_trend()`\n* 从交易所更新交易的未完成订单状态。\n  * 为已成交订单调用`order_filled()`策略回调函数。\n  * 检查未完成订单的超时情况。\n    * 为未完成的入场订单调用`check_entry_timeout()`策略回调函数。\n    * 为未完成的出场订单调用`check_exit_timeout()`策略回调函数。\n    * 为未完成订单调用`adjust_order_price()`策略回调函数。\n      * 当未实现`adjust_order_price()`时，为未完成的入场订单调用`adjust_entry_price()`策略回调函数。\n      * 当未实现`adjust_order_price()`时，为未完成的出场订单调用`adjust_exit_price()`策略回调函数。\n* 验证现有持仓并最终下达平仓订单。\n  * 考虑止损、ROI和出场信号、`custom_exit()`及`custom_stoploss()`。\n  * 根据`exit_pricing`配置设置或使用`custom_exit_price()`回调函数确定平仓价格。\n  * 在下达平仓订单前，会调用`confirm_trade_exit()`策略回调函数。\n* 如果启用，通过调用`adjust_trade_position()`检查未平仓交易的仓位调整，并在需要时下达额外订单。\n* 检查交易槽是否仍可用（是否已达到`max_open_trades`限制）。\n* 验证入场信号，尝试建立新仓位。\n  * 根据`entry_pricing`配置设置或使用`custom_entry_price()`回调函数确定入场价格。\n  * 在保证金和期货模式下，调用`leverage()`策略回调函数以确定所需杠杆。\n  * 通过调用`custom_stake_amount()`回调函数确定持仓金额。\n  * 在下达入场订单前，会调用`confirm_trade_entry()`策略回调函数。\n\n此循环将反复进行，直到机器人停止。\n\n## 回测/超参数优化执行逻辑\n\n[回测](backtesting.md)或[超参数优化](hyperopt.md)仅执行上述部分逻辑，因为大多数交易操作是完全模拟的。\n\n* 加载配置的交易对列表的历史数据。\n* 调用一次`bot_start()`。\n* 计算指标（每个交易对调用一次`populate_indicators()`）。\n* 计算入场/出场信号（每个交易对调用一次`populate_entry_trend()`和`populate_exit_trend()`）。\n* 按K线循环模拟入场和出场点。\n  * 调用`bot_loop_start()`策略回调函数。\n  * 检查订单超时，通过`unfilledtimeout`配置或`check_entry_timeout()`/`check_exit_timeout()`策略回调函数。\n  * 为未完成订单调用`adjust_order_price()`策略回调函数。\n    * 当未实现`adjust_order_price()`时，为未完成的入场订单调用`adjust_entry_price()`策略回调函数！\n    * 当未实现`adjust_order_price()`时，为未完成的出场订单调用`adjust_exit_price()`策略回调函数！\n  * 检查交易入场信号（`enter_long`/`enter_short`列）。\n  * 确认交易入场/出场（如果策略中实现了`confirm_trade_entry()`和`confirm_trade_exit()`，则调用它们）。\n  * 调用`custom_entry_price()`（如果策略中实现）以确定入场价格（价格会调整到开盘K线范围内）。\n  * 在保证金和期货模式下，调用`leverage()`策略回调函数以确定所需杠杆。\n  * 通过调用`custom_stake_amount()`回调函数确定持仓金额。\n  * 如果启用，检查未平仓交易的仓位调整，并调用`adjust_trade_position()`以确定是否需要额外订单。\n  * 为已成交的入场订单调用`order_filled()`策略回调函数。\n  * 调用`custom_stoploss()`和`custom_exit()`以找到自定义出场点。\n  * 对于基于出场信号、自定义出场和部分出场的情况：调用`custom_exit_price()`确定出场价格（价格会调整到收盘K线范围内）。\n  * 为已成交的出场订单调用`order_filled()`策略回调函数。\n* 生成回测报告输出\n\n!!! Note\n    回测和超参数优化的计算均包含交易所默认费用。可以通过指定`--fee`参数将自定义费用传递给回测/超参数优化。\n\n!!! Warning \"回调函数调用频率\"\n    回测最多每个K线调用一次每个回调函数（`--timeframe-detail`参数将此行为修改为每个详细K线调用一次）。实盘模式下，大多数回调函数每次迭代调用一次（通常每~5秒）——这可能导致回测不匹配。",
    "timestamp": "2025-07-31T05:37:25.181074"
  },
  "data-download.md": {
    "hash": "c0715738215731c4f49b81f4866cfecb",
    "content": "freqtrade download-data --exchange binance",
    "timestamp": "2025-07-31T05:37:28.474250"
  },
  "docker_quickstart.md": {
    "hash": "4a8ee8a642c8907e2ba80962170afc6c",
    "content": "上述代码片段创建名为`ft_userdata`的新目录，下载最新的compose文件并拉取freqtrade镜像。\n片段中的最后两步创建带有`user_data`的目录，并（交互式地）基于您的选择创建默认配置。\n\n!!! Question \"如何编辑机器人配置？\"\n    您可以随时编辑配置，使用上述配置时，配置文件位于`ft_userdata`目录下的`user_data/config.json`。\n\n    您也可以通过编辑`docker-compose.yml`文件的命令部分来更改策略和命令。\n\n#### 添加自定义策略\n\n1. 配置文件现在位于`user_data/config.json`\n2. 将自定义策略复制到`user_data/strategies/`目录\n3. 将策略类名添加到`docker-compose.yml`文件中\n\n默认运行`SampleStrategy`。\n\n!!! Danger \"`SampleStrategy`只是一个演示！\"\n    `SampleStrategy`仅作为参考，为您提供自定义策略的思路。\n    请务必对您的策略进行回测，并在投入真实资金前使用干运行模式测试一段时间！\n    您可以在[策略自定义文档](strategy-customization.md)中找到更多关于策略开发的信息。\n\n完成上述步骤后，您就可以启动机器人进入交易模式（干运行或实盘交易，取决于您在上述问题中的回答）。",
    "timestamp": "2025-07-31T05:37:45.862465"
  },
  "advanced-setup.md": {
    "hash": "a26f668bee221e4e5100aafcbdfd8bed",
    "content": "这意味着，如果您在两个不同的终端中运行交易命令（例如，同时测试策略在USDT和BTC中的交易），则必须使用不同的数据库运行它们。\n\n如果您指定的数据库URL不存在，Freqtrade将使用您指定的名称创建一个。因此，要使用BTC和USDT作为基础货币测试您的自定义策略，可以使用以下命令（在2个单独的终端中）：",
    "timestamp": "2025-07-31T05:37:47.452894"
  },
  "freq-ui.md": {
    "hash": "8e86e34c2848b3c76cda78184beea389",
    "content": "# FreqUI\n\nFreqtrade提供了一个内置Web服务器，可用于运行[FreqUI](https://github.com/freqtrade/frequi)——Freqtrade的前端界面。\n\n默认情况下，UI会作为安装过程的一部分自动安装（脚本、Docker方式）。也可以使用 `freqtrade install-ui` 命令手动安装freqUI。此命令也可用于将freqUI更新到新版本。\n\n一旦机器人以交易/回测模式启动（使用 `freqtrade trade` 命令），UI将在配置的API端口下可用（默认地址为 `http://127.0.0.1:8080`）。\n\n??? 注意 \"想要为freqUI贡献代码？\"\n    开发者不应使用此方法，而应克隆相应的仓库，并使用 [freqUI 仓库](https://github.com/freqtrade/frequi) 中描述的方法获取freqUI的源代码。构建前端需要安装有效的node环境。\n\n!!! 提示 \"运行freqtrade不需要freqUI\"\n    freqUI是freqtrade的可选组件，并非运行机器人所必需。它是一个可用于监控机器人和与之交互的前端界面——但即使没有它，freqtrade本身也能完美运行。\n\n## 配置\n\nFreqUI没有自己的配置文件，但其运行依赖于已正确设置的 [rest-api](rest-api.md)。请参考相应的文档页面来完成freqUI的设置。\n\n## UI\n\nFreqUI是一个现代化、响应式的Web应用，可用于监控机器人并与之交互。\n\nFreqUI提供浅色和深色两种主题。可以通过页面顶部的显眼按钮轻松切换主题。本页面截图的主题会根据所选的文档主题进行适配，因此若要查看深色（或浅色）版本，请切换文档的主题。\n\n### 登录\n\n下面的截图显示了freqUI的登录界面。\n\n![FreqUI - login](assets/frequi-login-CORS.png#only-dark)\n![FreqUI - login](assets/frequi-login-CORS-light.png#only-light)\n\n!!! 提示 \"CORS\"\n    此截图中显示的CORS错误是由于UI与API运行在不同端口，且 [CORS](#cors) 尚未正确设置所致。\n\n### 交易视图\n\n交易视图允许您可视化机器人正在进行的交易并与机器人交互。在此页面上，您还可以通过启动和停止机器人来与之交互，并且（如果已配置）可以强制交易的进入和退出。\n\n![FreqUI - trade view](assets/freqUI-trade-pane-dark.png#only-dark)\n![FreqUI - trade view](assets/freqUI-trade-pane-light.png#only-light)\n\n### 图表配置器\n\nFreqUI图表可以通过策略中的 `plot_config` 配置对象（可通过“来自策略”按钮加载）或通过UI进行配置。可以创建多个图表配置并随意切换，从而灵活地以不同视图查看图表。\n\n可以通过交易视图右上角的“图表配置器”（齿轮图标）按钮访问图表配置。\n\n![FreqUI - plot configuration](assets/freqUI-plot-configurator-dark.png#only-dark)\n![FreqUI - plot configuration](assets/freqUI-plot-configurator-light.png#only-light)\n\n### 设置\n\n通过访问设置页面，可以更改多个与UI相关的设置。\n\n您可以更改的设置包括（但不限于）：\n\n* UI的时区\n* 在网站图标（浏览器标签）中显示未平仓交易\n* K线颜色（上涨/下跌 -> 红色/绿色）\n* 启用/禁用应用内通知类型\n\n![FreqUI - Settings view](assets/frequi-settings-dark.png#only-dark)\n![FreqUI - Settings view](assets/frequi-settings-light.png#only-light)\n\n## 回测\n\n当freqtrade以 [Web服务器模式](utils.md#webserver-mode) 启动（使用 `freqtrade webserver` 命令启动）时，回测视图将可用。此视图允许您回测策略并可视化结果。\n\n您还可以加载和可视化以前的回测结果，并将结果相互比较。\n\n![FreqUI - Backtesting](assets/freqUI-backtesting-dark.png#only-dark)\n![FreqUI - Backtesting](assets/freqUI-backtesting-light.png#only-light)\n\n\n--8<-- \"includes/cors.md\"",
    "timestamp": "2025-07-31T05:37:52.685918"
  },
  "faq.md": {
    "hash": "c60bbff323bcc2611329bfd79fb32958",
    "content": "# Freqtrade 常见问题解答 (FAQ)\n\n## 支持的市场\n\nFreqtrade支持现货交易，以及部分选定交易所的（隔离）期货交易。有关支持期货交易的交易所的最新列表，请参考[文档起始页](index.md#supported-futures-exchanges-experimental)。\n\n### 机器人能否开空仓？\n\nFreqtrade可以在期货市场开空仓。\n这需要策略为此专门设计，并且配置中设置`\"trading_mode\": \"futures\"`。\n请确保先阅读[相关文档页面](leverage.md)。\n\n在现货市场中，某些情况下您可以使用杠杆现货代币，这些代币反映反向交易对（例如BTCUP/USD、BTCDOWN/USD、ETHBULL/USD、ETHBEAR/USD等），可通过Freqtrade进行交易。\n\n### 机器人能否交易期权或期货？\n\n部分选定交易所支持期货交易。有关支持期货交易的交易所的最新列表，请参考[文档起始页](index.md#supported-futures-exchanges-experimental)。\n\n## 初学者提示与技巧\n\n* 处理策略和超参数优化文件时，应使用合适的代码编辑器，如VSCode或PyCharm。好的代码编辑器会提供语法高亮和行号，便于查找语法错误（Freqtrade通常会在启动时指出这些错误）。\n\n## Freqtrade 常见问题\n\n### Freqtrade能否同时对同一交易对开多个仓位？\n\n不能。Freqtrade同一时间对每个交易对仅开一个仓位。\n不过，您可以使用[`adjust_trade_position()`回调函数](strategy-callbacks.md#adjust-trade-position)调整已开仓位。\n\n回测中提供了`--eps`选项支持此功能——但这仅用于突出显示“隐藏”信号，实盘模式下无效。\n\n### 机器人无法启动\n\n使用`freqtrade trade --config config.json`运行机器人时，输出显示`freqtrade: command not found`。\n\n这可能由以下原因引起：\n\n* 虚拟环境未激活。\n  * 运行`source .venv/bin/activate`激活虚拟环境。\n* 安装未成功完成。\n  * 请查看[安装文档](installation.md)。\n\n### 机器人启动后处于STOPPED模式\n\n请确保在config.json中设置`initial_state`配置选项为`\"running\"`。\n\n### 我已经等了5分钟，为什么机器人还没有进行任何交易？\n\n* 根据入场策略、白名单币种数量、市场情况等因素，机器人可能需要数小时甚至数天才能找到合适的入场位置。请耐心等待！\n\n* 回测会大致告诉您预期的交易数量——但这不能保证交易在时间上均匀分布——您可能在某一天有20笔交易，而一周中其他时间没有交易。\n\n* 也可能是配置错误。最好检查日志，日志通常会告诉您机器人是只是没有获得买入信号（仅显示心跳消息），还是存在问题（日志中的错误/异常）。\n\n### 我已经进行了12笔交易，为什么总利润是负的？\n\n我理解您的失望，但不幸的是12笔交易太少，无法说明任何问题。运行回测时，您会看到当前算法最终会让您盈利，但这是在数千笔交易之后，即使如此，您在特定币种上仍可能亏损数十甚至数百次。我们当然会不断改进机器人，但交易始终是一种博弈，每月可能会有适度盈利，但仅凭少数几笔交易无法得出结论。\n\n### 我想修改配置，能否不关闭机器人？\n\n可以。您可以编辑配置，然后使用`/reload_config`命令重新加载配置。机器人会停止，重新加载配置和策略，然后使用新配置和策略重启。\n\n### 为什么机器人没有卖出所有买入的资产？\n\n这称为“代币尘埃”，所有交易所都可能出现。\n原因是许多交易所从“接收币种”中扣除手续费——例如您买入100个COIN，但实际到账99.9个COIN。\n由于COIN以完整的 lot 大小交易（1COIN为单位），您无法卖出0.9个COIN（或99.9个COIN）——必须向下取整为99个COIN。\n\n这不是机器人的问题，手动交易时也会发生。\n\n虽然Freqtrade可以处理（卖出99个COIN），但手续费通常低于最小交易 lot 大小（您只能交易完整的COIN，不能交易0.9个COIN）。\n将尘埃（0.9个COIN）留在交易所通常是合理的，因为下次Freqtrade买入COIN时，会使用剩余的小额余额，此时卖出所有买入的资产，从而慢慢减少尘埃余额（尽管很可能永远不会精确到0）。\n\n在可能的情况下（如Binance），使用交易所的专用手续费币种可以解决此问题。\n在Binance，只需账户中有BNB，并在个人资料中启用“使用BNB支付手续费”。您的BNB余额会慢慢减少（用于支付手续费）——但您将不再遇到尘埃问题（Freqtrade会将手续费计入利润计算）。\n其他交易所不提供此类功能，您只能接受或更换交易所。\n\n### 我向交易所存入了更多资金，但机器人没有识别到\n\nFreqtrade会在必要时（下单前）更新交易所余额。\nRPC调用（Telegram的`/balance`、API调用`/balance`）最多每小时触发一次更新。\n\n如果启用了`adjust_trade_position`（且机器人有符合条件的未平仓交易可调整仓位）——钱包将每小时刷新一次。\n要强制立即更新，可以使用`/reload_config`——这会重启机器人。\n\n### 我想使用未完成的K线\n\nFreqtrade不会向策略提供未完成的K线。使用未完成的K线会导致指标重绘，从而产生“虚假”买入信号，这些信号无法回测，也无法在事后验证。\n\n您可以通过[数据提供器](strategy-customization.md#orderbookpair-maximum)的订单簿或行情方法使用“当前”市场数据——但这些无法在回测中使用。\n\n### 是否有设置只平仓现有交易而不进行新的入场？\n\n您可以在Telegram中使用`/stopentry`命令阻止未来的交易入场，然后使用`/forceexit all`（卖出所有未平仓交易）。\n\n### 我手动卖出了机器人的资金，现在日志中出现错误\n\nFreqtrade假设其开的交易仅通过机器人管理。  \n如果您（意外）卖出了机器人的资金，Freqtrade会尝试通过重新查找交易所订单来恢复。\n\n这是一种尽力而为的方法，并非在所有情况下都有效，尤其是使用Freqtrade不支持的订单类型（OCO、冰山订单等），或处理较旧的交易（交易所不再提供完整订单信息）时。\n具体限制因交易所而异——详情通常记录在交易所的API文档中。\n\n### 我想在同一台机器上运行多个机器人\n\n请查看[高级设置文档页面](advanced-setup.md#running-multiple-instances-of-freqtrade)。\n\n### 启动机器人时出现“无法加载策略”错误\n\n当机器人无法加载策略时，会显示此错误消息。\n通常，您可以使用`freqtrade list-strategies`列出所有可用策略。  \n此命令的输出还包括状态列，显示策略是否可加载。\n\n请检查以下事项：\n\n* 您是否使用了正确的策略名称？策略名称区分大小写，且必须与策略类名对应（不是文件名！）。\n* 策略是否位于`user_data/strategies`目录中，且文件扩展名为`.py`？\n* 机器人在该错误之前是否显示其他警告？可能您缺少策略的某些依赖项——日志中会突出显示。\n* 如果使用docker——策略目录是否正确挂载（检查docker-compose文件的volumes部分）？\n\n### 日志中出现“Missing data fillup”消息\n\n此消息只是警告最近的K线中存在缺失的K线。\n根据交易所的不同，这可能表示该交易对在您使用的时间框架内没有交易——交易所仅返回有成交量的K线。\n在低成交量交易对上，这是相当常见的情况。\n\n如果所有交易对都出现此消息，可能表示交易所最近宕机。请查看交易所的公共渠道了解详情。\n\n无论原因如何，Freqtrade会用“空”K线填充这些缺失的K线，开盘价、最高价、最低价和收盘价设为前一根K线的收盘价——成交量为空。在图表中，这看起来像`_`——与交易所通常表示0成交量K线的方式一致。\n\n### 出现“Price jump between 2 candles detected”消息\n\n此消息是警告K线之间价格跳升超过30%。\n这可能表明该交易对停止交易，且发生了某种代币兑换（例如2021年的COCOS——价格从0.0000154跳升至0.01621）。\n此消息通常伴随[“Missing data fillup”](#im-getting-missing-data-fillup-messages-in-the-log)——因为此类交易对的交易通常会停止一段时间。\n\n### 我想重置机器人的数据库\n\n要重置机器人数据库，您可以删除数据库文件（默认是`tradesv3.sqlite`或`tradesv3.dryrun.sqlite`），或通过`--db-url`使用不同的数据库URL（例如`sqlite:///mynewdatabase.sqlite`）。\n\n### 日志中出现“Outdated history for pair xxx”\n\n机器人试图告诉您它获取到的是过时的最后一根K线（不是最后一根完整的K线）。\n因此，Freqtrade不会为该交易对入场——因为基于旧信息交易通常不是预期行为。\n\n此警告可能指向以下问题之一：\n\n* 交易所宕机 -> 查看交易所状态页面/博客/Twitter获取详情。\n* 系统时间错误 -> 确保系统时间正确。\n* 交易量极低的交易对 -> 在交易所网页上查看该交易对，查看您策略使用的时间框架。如果该交易对在某些K线中没有成交量（通常显示为“成交量0”的柱状图，K线为“_”），则该交易对在该时间框架内没有交易。理想情况下应避免此类交易对，因为它们可能导致订单无法成交。\n* API问题 -> API返回错误数据（此处仅为完整性考虑，支持的交易所不应出现此问题）。\n\n### 出现“Exchange XXX does not support market orders.”消息，无法运行策略\n\n如消息所示，您的交易所不支持市价订单，而您的[订单类型](configuration.md/#understand-order_types)中有一项设置为“market”。您的策略可能是为其他交易所编写的，将“stoploss”订单设置为“market”，这对大多数支持市价订单的交易所是正确且首选的（但对Gate.io不是）。\n\n要解决此问题，请在策略中将订单类型重新定义为“limit”而非“market”：",
    "timestamp": "2025-07-31T05:38:13.515740"
  },
  "freqai-developers.md": {
    "hash": "517c73cf9aa6679f72a7c31659a9704e",
    "content": "# 开发\n\n## 项目架构\n\nFreqAI的架构和功能经过通用化设计，以鼓励开发独特的功能、函数、模型等。\n\n类结构和详细的算法概述如下图所示：\n\n![image](assets/freqai_algorithm-diagram.jpg)\n\n如图所示，FreqAI由三个不同的对象组成：\n\n* **IFreqaiModel** - 一个单一的持久化对象，包含收集、存储和处理数据、特征工程、运行训练以及模型推理所需的所有逻辑。\n* **FreqaiDataKitchen** - 一个非持久化对象，为每个独特的资产/模型单独创建。除了元数据外，它还包含各种数据处理工具。\n* **FreqaiDataDrawer** - 一个单一的持久化对象，包含所有历史预测、模型以及保存/加载方法。\n\n有多种内置的[预测模型](freqai-configuration.md#using-different-prediction-models)直接继承自`IFreqaiModel`。这些模型中的每一个都可以完全访问`IFreqaiModel`中的所有方法，因此可以随意重写其中任何函数。不过，高级用户可能会坚持重写`fit()`、`train()`、`predict()`以及`data_cleaning_train/predict()`。\n\n## 数据处理\n\nFreqAI旨在以简化后处理并通过自动数据重载增强崩溃恢复能力的方式组织模型文件、预测数据和元数据。数据保存在`user_data_dir/models/`文件结构中，该结构包含所有与训练和回测相关的数据。`FreqaiDataKitchen()`严重依赖此文件结构进行正确的训练和推理，因此不应手动修改。\n\n### 文件结构\n\n文件结构根据[配置](freqai-configuration.md#setting-up-the-configuration-file)中设置的模型`identifier`自动生成。以下结构显示了用于后处理的数据存储位置：\n\n| 结构 | 描述 |\n|-----------|-------------|\n| `config_*.json` | 模型特定配置文件的副本。 |\n| `historic_predictions.pkl` | 包含在实盘部署期间`identifier`模型生命周期内生成的所有历史预测的文件。`historic_predictions.pkl`用于在崩溃或配置更改后重新加载模型。主文件始终有一个备份文件，以防损坏。FreqAI **自动**检测损坏并使用备份替换损坏的文件。 |\n| `pair_dictionary.json` | 包含训练队列以及最近训练模型的磁盘位置的文件。 |\n| `sub-train-*_TIMESTAMP` | 包含与单个模型相关的所有文件的文件夹，例如： <br>|| `*_metadata.json` - 模型的元数据，例如归一化最大值/最小值、预期训练特征列表等。 <br>|| `*_model.*` - 保存到磁盘的模型文件，用于从崩溃中重新加载。可以是`joblib`（典型的 boosting 库）、`zip`（stable_baselines）、`hd5`（keras 类型）等。 <br>|| `*_pca_object.pkl` - [主成分分析（PCA）](freqai-feature-engineering.md#data-dimensionality-reduction-with-principal-component-analysis)变换（如果在配置中设置了`principal_component_analysis: True`），用于变换未见过的预测特征。 <br>|| `*_svm_model.pkl` - [支持向量机（SVM）](freqai-feature-engineering.md#identifying-outliers-using-a-support-vector-machine-svm)模型（如果在配置中设置了`use_SVM_to_remove_outliers: True`），用于检测未见过的预测特征中的异常值。 <br>|| `*_trained_df.pkl` - 包含用于训练`identifier`模型的所有训练特征的数据框。用于计算[不相似性指数（DI）](freqai-feature-engineering.md#identifying-outliers-with-the-dissimilarity-index-di)，也可用于后处理。 <br>|| `*_trained_dates.df.pkl` - 与`trained_df.pkl`关联的日期，对后处理有用。 |\n\n示例文件结构如下所示：",
    "timestamp": "2025-07-31T05:38:17.269593"
  },
  "exchanges.md": {
    "hash": "c1362eeedcf22cec0ab822e7d5aaf1f1",
    "content": "# 交易所特定说明\n\n本页面汇总了特定交易所的常见问题和信息，这些内容很可能不适用于其他交易所。\n\n## 交易所配置\n\nFreqtrade基于[CCXT库](https://github.com/ccxt/ccxt)，该库支持100多个加密货币交易市场和交易API。完整的最新列表可在[CCXT仓库主页](https://github.com/ccxt/ccxt/tree/master/python)中找到。\n然而，开发团队仅在少数几个交易所上测试过该机器人。当前支持的交易所列表可在本文档的“首页”部分找到。\n\n欢迎测试其他交易所，并提交反馈或PR以改进机器人或确认可正常运行的交易所。\n\n部分交易所需要特殊配置，详情如下。\n\n### 交易所配置示例\n\n\"binance\"的交易所配置如下所示：",
    "timestamp": "2025-07-31T05:38:19.139912"
  },
  "developer.md": {
    "hash": "c51eea3a4d492c603f48738586a297b8",
    "content": "这将启动一个本地服务器（通常在端口8000上），您可以查看内容是否符合预期。\n\n## 开发环境设置\n\n要配置开发环境，您可以使用提供的[开发容器](#devcontainer-setup)，或使用`setup.sh`脚本并在被问及“Do you want to install dependencies for dev [y/N]? ”时回答“y”。\n或者（例如，如果您的系统不支持setup.sh脚本），按照手动安装流程运行`pip3 install -r requirements-dev.txt`，然后运行`pip3 install -e .[all]`。\n\n这将安装所有开发所需的工具，包括`pytest`、`ruff`、`mypy`和`coveralls`。\n\n然后通过运行`pre-commit install`安装git钩子脚本，这样您的更改在提交前会在本地进行验证。\n这避免了大量等待CI的时间，因为一些基本的格式检查会在您的本地机器上完成。\n\n在创建拉取请求之前，请熟悉我们的[贡献指南](https://github.com/freqtrade/freqtrade/blob/develop/CONTRIBUTING.md)。\n\n### 开发容器设置\n\n开始开发的最快最简单方法是使用[VSCode](https://code.visualstudio.com/)和Remote Container扩展。\n这使开发者能够启动包含所有必要依赖的机器人，*无需*在本地机器上安装任何Freqtrade特定的依赖。\n\n#### 开发容器依赖项\n\n* [VSCode](https://code.visualstudio.com/)\n* [docker](https://docs.docker.com/install/)\n* [Remote Container扩展文档](https://code.visualstudio.com/docs/remote)\n\n有关[Remote Container扩展](https://code.visualstudio.com/docs/remote)的更多信息，请查阅官方文档。\n\n### 测试\n\n新代码应包含基本的单元测试。根据功能的复杂性，审核者可能会要求更深入的单元测试。\n如有必要，Freqtrade团队可以协助并指导编写良好的测试（但请不要期望有人为您编写测试）。\n\n#### 如何运行测试\n\n在根文件夹中使用`pytest`运行所有可用的测试用例，并确认您的本地环境设置正确。\n\n!!! 注意 \"功能分支\"\n    测试应在`develop`和`stable`分支上通过。其他分支可能是正在开发中的工作，测试可能尚未通过。\n\n#### 在测试中检查日志内容\n\nFreqtrade使用两种主要方法在测试中检查日志内容：`log_has()`和`log_has_re()`（使用正则表达式检查动态日志消息）。\n这些方法可从`conftest.py`获取，并可导入到任何测试模块中。\n\n示例检查如下：",
    "timestamp": "2025-07-31T05:38:20.853126"
  },
  "freqai-running.md": {
    "hash": "8f057d074b675fcde8c9f50e8475c9d9",
    "content": "# 运行FreqAI\n\n有两种方式可以训练和部署自适应机器学习模型——实时部署和历史回测。在这两种情况下，FreqAI都会按照下图所示，运行/模拟模型的定期重新训练：\n\n![freqai-window](assets/freqai_moving-window.jpg)\n\n## 实时部署\n\n可以使用以下命令以模拟/实时模式运行FreqAI：",
    "timestamp": "2025-07-31T05:38:53.452275"
  },
  "freqai-reinforcement-learning.md": {
    "hash": "e0ae89aa9fbc83a1f1c8d3fab87ca812",
    "content": "freqtrade trade --freqaimodel ReinforcementLearner --strategy MyRLStrategy --config config.json",
    "timestamp": "2025-07-31T05:38:58.887459"
  },
  "freqai-parameter-table.md": {
    "hash": "15ed7c6ecfc8110e86b56310613e98df",
    "content": "# 参数表\n\n下表列出了FreqAI可用的所有配置参数。部分参数在`config_examples/config_freqai.example.json`中有示例。\n\n必填参数标记为**必填项**，必须通过建议的方式之一进行设置。\n\n### 常规配置参数\n\n| 参数 | 描述 |\n|------------|-------------|\n|  |  **`config.freqai` 树中的常规配置参数**\n| `freqai` | **必填项。** <br> 包含所有用于控制FreqAI的参数的父字典。 <br> **数据类型：** 字典。\n| `train_period_days` | **必填项。** <br> 用于训练数据的天数（滑动窗口的宽度）。 <br> **数据类型：** 正整数。\n| `backtest_period_days` | **必填项。** <br> 在回测期间，从训练好的模型进行推理的天数，之后滑动上述定义的`train_period_days`窗口并重新训练模型（更多信息见[这里](freqai-running.md#backtesting)）。可以是分数天，但请注意，提供的`timerange`将除以该数值，以得出完成回测所需的训练次数。 <br> **数据类型：** 浮点数。\n| `identifier` | **必填项。** <br> 当前模型的唯一ID。如果模型保存到磁盘，`identifier`允许重新加载特定的预训练模型/数据。 <br> **数据类型：** 字符串。\n| `live_retrain_hours` | 模拟/实盘运行期间的重训练频率。 <br> **数据类型：** 大于0的浮点数。 <br> 默认值：`0`（模型尽可能频繁地重训练）。\n| `expiration_hours` | 如果模型超过`expiration_hours`小时，则避免进行预测。 <br> **数据类型：** 正整数。 <br> 默认值：`0`（模型永不过期）。\n| `purge_old_models` | 保留在磁盘上的模型数量（与回测无关）。默认值为2，意味着模拟/实盘运行将在磁盘上保留最新的2个模型。设置为0则保留所有模型。此参数也接受布尔值以保持向后兼容性。 <br> **数据类型：** 整数。 <br> 默认值：`2`。\n| `save_backtest_models` | 运行回测时将模型保存到磁盘。回测通过保存预测数据并直接在后续运行中重用（当您希望调整入场/出场参数时）来实现最高效率。将回测模型保存到磁盘还允许使用相同的模型文件启动具有相同模型`identifier`的模拟/实盘实例。 <br> **数据类型：** 布尔值。 <br> 默认值：`False`（不保存模型）。\n| `fit_live_predictions_candles` | 用于从预测数据计算目标（标签）统计信息的历史K线数量，而非从训练数据集（更多信息见[这里](freqai-configuration.md#creating-a-dynamic-target-threshold)）。 <br> **数据类型：** 正整数。\n| `continual_learning` | 使用最近训练模型的最终状态作为新模型的起点，允许增量学习（更多信息见[这里](freqai-running.md#continual-learning)）。请注意，这目前是一种朴素的增量学习方法，当市场偏离您的模型时，很可能会过拟合/陷入局部最小值。我们在此提供连接主要是为了实验目的，并为在加密市场等混沌系统中更成熟的持续学习方法做好准备。 <br> **数据类型：** 布尔值。 <br> 默认值：`False`。\n| `write_metrics_to_disk` | 收集训练时间、推理时间和CPU使用率到json文件中。 <br> **数据类型：** 布尔值。 <br> 默认值：`False`\n| `data_kitchen_thread_count` | <br> 指定用于数据处理（异常值方法、归一化等）的线程数。这对训练使用的线程数没有影响。如果用户未设置（默认），FreqAI将使用最大线程数减2（为Freqtrade机器人和FreqUI留下1个物理核心） <br> **数据类型：** 正整数。\n| `activate_tensorboard` | <br> 指示是否为支持TensorBoard的模块（当前为强化学习、XGBoost、Catboost和PyTorch）激活TensorBoard。TensorBoard需要安装Torch，这意味着您需要torch/RL docker镜像，或者在安装时回答“是”以安装Torch。 <br> **数据类型：** 布尔值。 <br> 默认值：`True`。\n| `wait_for_training_iteration_on_reload` | <br> 使用/reload或ctrl-c时，等待当前训练迭代完成后再优雅关闭。如果设置为`False`，FreqAI将中断当前训练迭代，允许更快地优雅关闭，但会丢失当前训练迭代。 <br> **数据类型：** 布尔值。 <br> 默认值：`True`。\n\n### 特征参数\n\n| 参数 | 描述 |\n|------------|-------------|\n|  |  **`freqai.feature_parameters` 子字典中的特征参数**\n| `feature_parameters` | 包含用于构建特征集的参数的字典。详细信息和示例见[这里](freqai-feature-engineering.md)。 <br> **数据类型：** 字典。\n| `include_timeframes` | `feature_engineering_expand_*()` 中所有指标将为之创建的时间框架列表。该列表将作为特征添加到基础指标数据集中。 <br> **数据类型：** 时间框架列表（字符串）。\n| `include_corr_pairlist` | 相关币种列表，FreqAI将为所有`pair_whitelist`币种添加这些币种作为额外特征。特征工程期间（详见[这里](freqai-feature-engineering.md)）在`feature_engineering_expand_*()`中设置的所有指标将为每个相关币种创建。相关币种的特征将添加到基础指标数据集中。 <br> **数据类型：** 资产列表（字符串）。\n| `label_period_candles` | 为其创建标签的未来K线数量。可在`set_freqai_targets()`中使用（详见`templates/FreqaiExampleStrategy.py`中的用法）。此参数不一定是必填项，您可以创建自定义标签并选择是否使用此参数。请参见`templates/FreqaiExampleStrategy.py`查看示例用法。 <br> **数据类型：** 正整数。\n| `include_shifted_candles` | 将前几根K线的特征添加到后续K线中，目的是添加历史信息。如果使用，FreqAI将复制并移动`include_shifted_candles`根前序K线的所有特征，以便后续K线可以使用这些信息。 <br> **数据类型：** 正整数。\n| `weight_factor` | 根据数据点的新近度对训练数据点进行加权（详见[这里](freqai-feature-engineering.md#weighting-features-for-temporal-importance)）。 <br> **数据类型：** 正浮点数（通常<1）。\n| `indicator_max_period_candles` | **不再使用（#7325）**。由策略中设置的`startup_candle_count`替换（见[freqai-configuration.md#building-a-freqai-strategy](freqai-configuration.md#building-a-freqai-strategy)）。`startup_candle_count`与时间框架无关，定义了`feature_engineering_*()`中用于指标创建的最大周期。FreqAI使用此参数以及`include_time_frames`中的最大时间框架来计算需要下载的数据点数量，以确保第一个数据点不包含NaN。 <br> **数据类型：** 正整数。\n| `indicator_periods_candles` | 用于计算指标的时间周期。指标将添加到基础指标数据集中。 <br> **数据类型：** 正整数列表。\n| `principal_component_analysis` | 使用主成分分析自动降低数据集的维度。详见其工作原理[这里](freqai-feature-engineering.md#data-dimensionality-reduction-with-principal-component-analysis) <br> **数据类型：** 布尔值。 <br> 默认值：`False`。\n| `plot_feature_importances` | 为每个模型创建特征重要性图，显示`plot_feature_importances`数量的顶部/底部特征。图表存储在`user_data/models/<identifier>/sub-train-<COIN>_<timestamp>.html`。 <br> **数据类型：** 整数。 <br> 默认值：`0`。\n| `DI_threshold` | 当设置为>0时，激活使用差异指数（Dissimilarity Index）进行异常值检测。详见其工作原理[这里](freqai-feature-engineering.md#identifying-outliers-with-the-dissimilarity-index-di)。 <br> **数据类型：** 正浮点数（通常<1）。\n| `use_SVM_to_remove_outliers` | 训练支持向量机以检测并从训练数据集以及传入数据点中移除异常值。详见其工作原理[这里](freqai-feature-engineering.md#identifying-outliers-using-a-support-vector-machine-svm)。 <br> **数据类型：** 布尔值。\n| `svm_params` | Sklearn的`SGDOneClassSVM()`中可用的所有参数。详见部分选定参数[这里](freqai-feature-engineering.md#identifying-outliers-using-a-support-vector-machine-svm)。 <br> **数据类型：** 字典。\n| `use_DBSCAN_to_remove_outliers` | 使用DBSCAN算法对数据进行聚类，以识别并从训练和预测数据中移除异常值。详见其工作原理[这里](freqai-feature-engineering.md#identifying-outliers-with-dbscan)。 <br> **数据类型：** 布尔值。 \n| `noise_standard_deviation` | 如果设置，FreqAI会向训练特征添加噪声，目的是防止过拟合。FreqAI从具有`noise_standard_deviation`标准差的高斯分布生成随机偏差，并将其添加到所有数据点。`noise_standard_deviation`应相对于归一化空间设置，即介于-1和1之间。换句话说，由于FreqAI中的数据始终归一化到-1和1之间，`noise_standard_deviation: 0.05`将导致32%的数据随机增加/减少超过2.5%（即落在第一个标准差内的数据百分比）。 <br> **数据类型：** 整数。 <br> 默认值：`0`。\n| `outlier_protection_percentage` | 启用以防止异常值检测方法丢弃过多数据。如果SVM或DBSCAN检测到超过`outlier_protection_percentage`%的点为异常值，FreqAI将记录警告消息并忽略异常值检测，即保留原始数据集。如果触发异常值保护，将不会基于该训练数据集进行预测。 <br> **数据类型：** 浮点数。 <br> 默认值：`30`。\n| `reverse_train_test_order` | 分割特征数据集（见下文），并使用最新的数据分割进行训练，在历史数据分割上进行测试。这允许模型训练到最新的数据点，同时避免过拟合。但是，在使用此参数之前，您应该了解其非传统性质。 <br> **数据类型：** 布尔值。 <br> 默认值：`False`（不反转）。\n| `shuffle_after_split` | 将数据分割为训练集和测试集，然后分别打乱两个集合。 <br> **数据类型：** 布尔值。 <br> 默认值：`False`。\n| `buffer_train_data_candles` | 在指标填充后，从训练数据的开头和结尾切除`buffer_train_data_candles`根K线。主要示例用途是在预测最大值和最小值时，argrelextrema函数无法知道时间范围边缘的最大值/最小值。为提高模型准确性，最好在完整时间范围内计算argrelextrema，然后使用此函数通过内核切除边缘（缓冲区）。在另一种情况下，如果目标设置为偏移价格变动，则此缓冲区是不必要的，因为时间范围末尾的偏移K线将为NaN，FreqAI会自动从训练数据集中切除这些K线。<br> **数据类型：** 整数。 <br> 默认值：`0`。\n\n### 数据分割参数\n\n| 参数 | 描述 |\n|------------|-------------|\n|  |  **`freqai.data_split_parameters` 子字典中的数据分割参数**\n| `data_split_parameters` | 包含scikit-learn `test_train_split()`的任何其他可用参数，详见[这里](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)（外部网站）。 <br> **数据类型：** 字典。\n| `test_size` | 应用于测试而非训练的数据比例。 <br> **数据类型：** 正浮点数<1。\n| `shuffle` | 训练期间打乱训练数据点。通常，为了不破坏时间序列预测中的数据时间顺序，此参数设置为`False`。 <br> **数据类型：** 布尔值。 <br> 默认值：`False`。\n\n### 模型训练参数\n\n| 参数 | 描述 |\n|------------|-------------|\n|  |  **`freqai.model_training_parameters` 子字典中的模型训练参数**\n| `model_training_parameters` | 包含所选模型库可用的所有参数的灵活字典。例如，如果使用`LightGBMRegressor`，此字典可以包含`LightGBMRegressor`的任何参数（见[这里](https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.LGBMRegressor.html)（外部网站））。如果选择不同的模型，此字典可以包含该模型的任何参数。当前可用模型列表见[这里](freqai-configuration.md#using-different-prediction-models)。  <br> **数据类型：** 字典。\n| `n_estimators` | 模型训练中拟合的提升树数量。 <br> **数据类型：** 整数。\n| `learning_rate` | 模型训练期间的提升学习率。 <br> **数据类型：** 浮点数。\n| `n_jobs`, `thread_count`, `task_type` | 设置并行处理的线程数和`task_type`（`gpu`或`cpu`）。不同的模型库使用不同的参数名称。 <br> **数据类型：** 浮点数。\n\n### 强化学习参数\n\n| 参数 | 描述 |\n|------------|-------------|\n|  |  **`freqai.rl_config` 子字典中的强化学习参数**\n| `rl_config` | 包含强化学习模型控制参数的字典。 <br> **数据类型：** 字典。\n| `train_cycles` | 训练时间步长将基于`train_cycles * 训练数据点数量`设置。 <br> **数据类型：** 整数。\n| `max_trade_duration_candles`| 指导智能体训练以将交易保持在期望长度以下。示例用法见`prediction_models/ReinforcementLearner.py`中的可自定义`calculate_reward()`函数。 <br> **数据类型：** int。\n| `model_type` | 来自stable_baselines3或SBcontrib的模型字符串。可用字符串包括：`'TRPO', 'ARS', 'RecurrentPPO', 'MaskablePPO', 'PPO', 'A2C', 'DQN'`。用户应确保`model_training_parameters`与对应的stable_baselines3模型的可用参数匹配，可查阅其文档。[PPO文档](https://stable-baselines3.readthedocs.io/en/master/modules/ppo.html)（外部网站） <br> **数据类型：** string。\n| `policy_type` | 来自stable_baselines3的可用策略类型之一 <br> **数据类型：** string。\n| `max_training_drawdown_pct` | 智能体在训练期间允许经历的最大回撤。 <br> **数据类型：** float。 <br> 默认值：0.8\n| `cpu_count` | 专用于强化学习训练过程的线程/CPU数量（取决于是否选择`ReinforcementLearning_multiproc`）。建议保持默认值，默认情况下，此值设置为物理核心总数减1。 <br> **数据类型：** int。 \n| `model_reward_parameters` | `ReinforcementLearner.py`中可自定义的`calculate_reward()`函数内使用的参数 <br> **数据类型：** int。\n| `add_state_info` | 告诉FreqAI在训练和推理的特征集中包含状态信息。当前状态变量包括交易持续时间、当前利润、交易仓位。仅在模拟/实盘运行中可用，回测时自动切换为false。 <br> **数据类型：** bool。 <br> 默认值：`False`。\n| `net_arch` | 网络架构，在[`stable_baselines3`文档](https://stable-baselines3.readthedocs.io/en/master/guide/custom_policy.html#examples)中有详细描述。概括地说：`[<共享层>, dict(vf=[<非共享值网络层>], pi=[<非共享策略网络层>])]`。默认设置为`[128, 128]`，定义了2个共享隐藏层，每个层有128个单元。\n| `randomize_starting_position` | 随机化每个回合的起始点以避免过拟合。 <br> **数据类型：** bool。 <br> 默认值：`False`。\n| `drop_ohlc_from_features` | 训练期间不将归一化的ohlc数据包含在传递给智能体的特征集中（在所有情况下，ohlc仍将用于驱动环境） <br> **数据类型：** Boolean。 <br> **默认值：** `False`\n| `progress_bar` | 显示进度条，包含当前进度、已用时间和估计剩余时间。 <br> **数据类型：** Boolean。 <br> 默认值：`False`。\n\n### PyTorch参数\n\n#### general\n\n| 参数 | 描述 |\n|------------|-------------|\n|  |  **`freqai.model_training_parameters` 子字典中的模型训练参数**\n| `learning_rate` | 传递给优化器的学习率。 <br> **数据类型：** float。 <br> 默认值：`3e-4`。\n| `model_kwargs` | 传递给模型类的参数。 <br> **数据类型：** dict。 <br> 默认值：`{}`。\n| `trainer_kwargs` | 传递给训练器类的参数。 <br> **数据类型：** dict。 <br> 默认值：`{}`。\n\n#### trainer_kwargs\n\n| 参数 | 描述 |\n|--------------|-------------|\n|              |  **`freqai.model_training_parameters.model_kwargs` 子字典中的模型训练参数**\n| `n_epochs`   | `n_epochs`参数是PyTorch训练循环中的关键设置，决定了整个训练数据集用于更新模型参数的次数。一个epoch表示完整遍历整个训练数据集一次。覆盖`n_steps`。必须设置`n_epochs`或`n_steps`之一。 <br><br> **数据类型：** int. 可选。 <br> 默认值：`10`。\n| `n_steps`    | 设置`n_epochs`的另一种方式——运行的训练迭代次数。此处的迭代指调用`optimizer.step()`的次数。如果设置了`n_epochs`，则忽略此参数。简化函数如下： <br><br> n_epochs = n_steps / (n_obs / batch_size) <br><br> 此处的目的是`n_steps`更容易优化，并且在不同n_obs（数据点数量）之间保持稳定。  <br> <br> **数据类型：** int. 可选。 <br> 默认值：`None`。\n| `batch_size` | 训练期间使用的批次大小。 <br><br> **数据类型：** int. <br> 默认值：`64`。\n\n\n### 其他参数\n\n| 参数 | 描述 |\n|------------|-------------|\n|  |  **额外参数**\n| `freqai.keras` | 如果所选模型使用Keras（通常用于基于TensorFlow的预测模型），需要激活此标志，以便模型的保存/加载遵循Keras标准。 <br> **数据类型：** Boolean。 <br> 默认值：`False`。\n| `freqai.conv_width` | 神经网络输入张量的宽度。通过将历史数据点作为张量的第二维度输入，取代了移动K线（`include_shifted_candles`）的需求。从技术上讲，此参数也可用于回归器，但只会增加计算开销，不会改变模型训练/预测。 <br> **数据类型：** Integer。 <br> 默认值：`2`。\n| `freqai.reduce_df_footprint` | 将所有数值列重新转换为float32/int32，目的是减少内存/磁盘使用量并缩短训练/推理时间。此参数在Freqtrade配置文件的主级别设置（不在FreqAI内部）。 <br> **数据类型：** Boolean。 <br> 默认值：`False`。",
    "timestamp": "2025-07-31T05:39:04.333079"
  },
  "index.md": {
    "hash": "3ad82c3d06838d41a71f9e859f6bb528",
    "content": "![freqtrade](assets/freqtrade_poweredby.svg)\n\n[![Freqtrade CI](https://github.com/freqtrade/freqtrade/actions/workflows/ci.yml/badge.svg?branch=develop)](https://github.com/freqtrade/freqtrade/actions/)\n[![DOI](https://joss.theoj.org/papers/10.21105/joss.04864/status.svg)](https://doi.org/10.21105/joss.04864)\n[![Coverage Status](https://coveralls.io/repos/github/freqtrade/freqtrade/badge.svg?branch=develop&service=github)](https://coveralls.io/github/freqtrade/freqtrade?branch=develop)\n[![Maintainability](https://api.codeclimate.com/v1/badges/5737e6d668200b7518ff/maintainability)](https://codeclimate.com/github/freqtrade/freqtrade/maintainability)\n\n<!-- GitHub action buttons -->\n[:octicons-star-16: 收藏](https://github.com/freqtrade/freqtrade){ .md-button .md-button--sm }\n[:octicons-repo-forked-16: 分叉](https://github.com/freqtrade/freqtrade/fork){ .md-button .md-button--sm }\n[:octicons-download-16: 下载](https://github.com/freqtrade/freqtrade/archive/stable.zip){ .md-button .md-button--sm }\n\n## 简介\n\nFreqtrade 是一个免费开源的加密货币交易机器人，用 Python 编写。它旨在支持所有主要交易所，并可通过 Telegram 或 webUI 进行控制。它包含回测、绘图和资金管理工具，以及通过机器学习进行策略优化的功能。\n\n!!! Danger \"免责声明\"\n    本软件仅用于教育目的。不要用你害怕损失的钱去冒险。使用本软件的风险由你自行承担。作者及所有关联方对你的交易结果不承担任何责任。\n\n    始终先以模拟运行（Dry-run）模式运行交易机器人，在你了解它的工作原理以及预期的盈亏之前，不要投入资金。\n\n    我们强烈建议你具备基本的编码技能和 Python 知识。不要犹豫阅读源代码，了解这个机器人的机制、算法和实现的技术。\n\n![freqtrade 截图](assets/freqtrade-screenshot.png)\n\n## 功能特性\n\n- 开发你的策略：用 Python 编写策略，使用 [pandas](https://pandas.pydata.org/)。策略库 [strategy repository](https://github.com/freqtrade/freqtrade-strategies) 中提供了可启发你的示例策略。\n- 下载市场数据：下载交易所的历史数据以及你可能想要交易的市场数据。\n- 回测：在下载的历史数据上测试你的策略。\n- 优化：使用采用机器学习方法的超参数优化，为你的策略找到最佳参数。你可以优化策略的买入、卖出、止盈（ROI）、止损和追踪止损参数。\n- 选择交易市场：创建静态列表或使用基于交易量和/或价格排名的自动列表（回测期间不可用）。你也可以明确将不想交易的市场加入黑名单。\n- 运行：用模拟资金测试你的策略（模拟运行模式）或用真实资金部署（实盘交易模式）。\n- 控制/监控：使用 Telegram 或 WebUI（启动/停止机器人、显示盈亏、每日总结、当前未平仓交易结果等）。\n- 分析：可对回测数据或 Freqtrade 交易历史（SQL 数据库）进行进一步分析，包括自动生成标准图表，以及将数据加载到 [交互式环境](data-analysis.md) 的方法。\n\n## 支持的交易所市场\n\n请阅读 [交易所特定说明](exchanges.md)，了解每个交易所可能需要的特殊配置。\n\n- [X] [Binance](https://www.binance.com/)\n- [X] [BingX](https://bingx.com/invite/0EM9RX)\n- [X] [Bitmart](https://bitmart.com/)\n- [X] [Bybit](https://bybit.com/)\n- [X] [Gate.io](https://www.gate.io/ref/6266643)\n- [X] [HTX](https://www.htx.com/)\n- [X] [Hyperliquid](https://hyperliquid.xyz/)（去中心化交易所，即 DEX）\n- [X] [Kraken](https://kraken.com/)\n- [X] [OKX](https://okx.com/)\n- [X] [MyOKX](https://okx.com/)（OKX 欧洲经济区版）\n- [ ] [通过 <img alt=\"ccxt\" width=\"30px\" src=\"assets/ccxt-logo.svg\" /> 可能支持许多其他交易所](https://github.com/ccxt/ccxt/)。_（我们不能保证它们都能正常工作）_\n\n### 支持的期货交易所（实验性）\n\n- [X] [Binance](https://www.binance.com/)\n- [X] [Bybit](https://bybit.com/)\n- [X] [Gate.io](https://www.gate.io/ref/6266643)\n- [X] [Hyperliquid](https://hyperliquid.xyz/)（去中心化交易所，即 DEX）\n- [X] [OKX](https://okx.com/)\n\n请务必在开始前阅读 [交易所特定说明](exchanges.md) 以及 [杠杆交易](leverage.md) 文档。\n\n### 社区测试通过\n\n社区确认可正常工作的交易所：\n\n- [X] [Bitvavo](https://bitvavo.com/)\n- [X] [Kucoin](https://www.kucoin.com/)\n\n## 社区展示\n\n--8<-- \"includes/showcase.md\"\n\n## 系统要求\n\n### 硬件要求\n\n运行此机器人，我们建议你使用 Linux 云服务器实例，最低配置为：\n\n- 2GB 内存\n- 1GB 磁盘空间\n- 2 核 vCPU\n\n### 软件要求\n\n- Docker（推荐）\n\n或者\n\n- Python 3.10+\n- pip (pip3)\n- git\n- TA-Lib\n- virtualenv（推荐）\n\n## 支持\n\n### 帮助 / Discord\n\n对于文档未涵盖的任何问题，或需要了解有关机器人的更多信息，或只是想与志同道合的人交流，我们鼓励你加入 Freqtrade [Discord 服务器](https://discord.gg/p7nuUNVfP7)。\n\n## 准备好尝试了吗？\n\n首先阅读安装指南 [Docker 版](docker_quickstart.md)（推荐），或 [无 Docker 安装版](installation.md)。",
    "timestamp": "2025-07-31T05:39:05.746146"
  },
  "freqai-feature-engineering.md": {
    "hash": "77632b776201ac898f4560fa25d3a779",
    "content": "def feature_engineering_expand_all(self, dataframe: DataFrame, period, metadata, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在启用FreqAI的策略中生效*\n        此函数将根据配置中定义的 `indicator_periods_candles`、`include_timeframes`、`include_shifted_candles` 和 \n        `include_corr_pairs` 自动扩展已定义的特征。换句话说，在此函数中定义的单个特征将自动扩展为 \n        `indicator_periods_candles` * `include_timeframes` * `include_shifted_candles` * \n        `include_corr_pairs` 个特征添加到模型中。\n\n        所有特征必须以 `%` 为前缀，才能被 FreqAI 内部识别。\n\n        使用以下方式访问元数据，例如当前交易对/时间框架/周期：\n\n        `metadata[\"pair\"]` `metadata[\"tf\"]`  `metadata[\"period\"]`\n\n        :param df: 将接收特征的策略数据框\n        :param period: 指标周期 - 使用示例：\n        :param metadata: 当前交易对的元数据\n        dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n        \"\"\"\n\n        dataframe[\"%-rsi-period\"] = ta.RSI(dataframe, timeperiod=period)\n        dataframe[\"%-mfi-period\"] = ta.MFI(dataframe, timeperiod=period)\n        dataframe[\"%-adx-period\"] = ta.ADX(dataframe, timeperiod=period)\n        dataframe[\"%-sma-period\"] = ta.SMA(dataframe, timeperiod=period)\n        dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n\n        bollinger = qtpylib.bollinger_bands(\n            qtpylib.typical_price(dataframe), window=period, stds=2.2\n        )\n        dataframe[\"bb_lowerband-period\"] = bollinger[\"lower\"]\n        dataframe[\"bb_middleband-period\"] = bollinger[\"mid\"]\n        dataframe[\"bb_upperband-period\"] = bollinger[\"upper\"]\n\n        dataframe[\"%-bb_width-period\"] = (\n            dataframe[\"bb_upperband-period\"]\n            - dataframe[\"bb_lowerband-period\"]\n        ) / dataframe[\"bb_middleband-period\"]\n        dataframe[\"%-close-bb_lower-period\"] = (\n            dataframe[\"close\"] / dataframe[\"bb_lowerband-period\"]\n        )\n\n        dataframe[\"%-roc-period\"] = ta.ROC(dataframe, timeperiod=period)\n\n        dataframe[\"%-relative_volume-period\"] = (\n            dataframe[\"volume\"] / dataframe[\"volume\"].rolling(period).mean()\n        )\n\n        return dataframe\n\n    def feature_engineering_expand_basic(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在启用FreqAI的策略中生效*\n        此函数将根据配置中定义的 `include_timeframes`、`include_shifted_candles` 和 `include_corr_pairs` 自动扩展已定义的特征。\n        换句话说，在此函数中定义的单个特征将自动扩展为 \n        `include_timeframes` * `include_shifted_candles` * `include_corr_pairs` 个特征添加到模型中。\n\n        此处定义的特征**不会**根据用户定义的 `indicator_periods_candles` 自动复制。\n\n        使用以下方式访问元数据，例如当前交易对/时间框架：\n\n        `metadata[\"pair\"]` `metadata[\"tf\"]`\n\n        所有特征必须以 `%` 为前缀，才能被 FreqAI 内部识别。\n\n        :param df: 将接收特征的策略数据框\n        :param metadata: 当前交易对的元数据\n        dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n        dataframe[\"%-ema-200\"] = ta.EMA(dataframe, timeperiod=200)\n        \"\"\"\n        dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n        dataframe[\"%-raw_volume\"] = dataframe[\"volume\"]\n        dataframe[\"%-raw_price\"] = dataframe[\"close\"]\n        return dataframe\n\n    def feature_engineering_standard(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在启用FreqAI的策略中生效*\n        此可选函数将使用基础时间框架的数据框调用一次。这是最后被调用的函数，意味着进入此函数的数据框将包含由其他 \n        `feature_engineering_expand` 函数创建的基础资产的所有特征和列。此函数是进行自定义复杂特征提取（例如 tsfresh）的理想位置。\n        此函数也是放置不应自动扩展的特征（例如星期几）的理想位置。\n\n        使用以下方式访问元数据，例如当前交易对：\n\n        `metadata[\"pair\"]`\n\n        所有特征必须以 `%` 为前缀，才能被 FreqAI 内部识别。\n\n        :param df: 将接收特征的策略数据框\n        :param metadata: 当前交易对的元数据\n        使用示例：dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n        \"\"\"\n        dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n        dataframe[\"%-hour_of_day\"] = (dataframe[\"date\"].dt.hour + 1) / 25\n        return dataframe\n\n    def set_freqai_targets(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在启用FreqAI的策略中生效*\n        设置模型目标的必需函数。所有目标必须以 `&` 为前缀，才能被 FreqAI 内部识别。\n\n        使用以下方式访问元数据，例如当前交易对：\n\n        `metadata[\"pair\"]`\n\n        :param df: 将接收目标的策略数据框\n        :param metadata: 当前交易对的元数据\n        使用示例：dataframe[\"&-target\"] = dataframe[\"close\"].shift(-1) / dataframe[\"close\"]\n        \"\"\"\n        dataframe[\"&-s_close\"] = (\n            dataframe[\"close\"]\n            .shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n            .rolling(self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n            .mean()\n            / dataframe[\"close\"]\n            - 1\n            )\n        \n        return dataframe",
    "timestamp": "2025-07-31T05:39:09.563070"
  },
  "plugins.md": {
    "hash": "6fe87f5cf538cd8dc2be78b4861b64ea",
    "content": "# 插件\n--8<-- \"includes/pairlists.md\"\n--8<-- \"includes/protections.md\"",
    "timestamp": "2025-07-31T05:39:10.049740"
  },
  "freqai.md": {
    "hash": "fda49bc6fcb382ac4b21d609803dd0cf",
    "content": "![freqai-logo](assets/freqai_doc_logo.svg)\n\n# FreqAI\n\n## 简介\n\nFreqAI 是一款旨在自动化与训练预测性机器学习模型相关的各种任务的软件，该模型可根据一组输入信号生成市场预测。总体而言，FreqAI 旨在成为一个沙盒，用于在实时数据上轻松部署强大的机器学习库（[详情](#freqai在开源机器学习领域的定位)）。\n\n!!! Note\n    FreqAI 现在是、将来也永远是一个非盈利的开源项目。FreqAI **没有**加密代币，**不**出售信号，并且除了当前的 [freqtrade 文档](https://www.freqtrade.io/en/latest/freqai/) 之外没有其他域名。\n\n功能包括：\n\n* **自适应再训练** - 在[实盘部署](freqai-running.md#live-deployments)期间重新训练模型，以监督方式自适应市场变化\n* **快速特征工程** - 基于用户创建的简单策略创建大型丰富的[特征集](freqai-feature-engineering.md#feature-engineering)（10k+ 特征）\n* **高性能** - 多线程允许在单独的线程（或在 GPU 可用时使用 GPU）上进行自适应模型再训练，与模型推理（预测）和机器人交易操作分开。最新模型和数据保存在 RAM 中以实现快速推理\n* **真实回测** - 使用[回测模块](freqai-running.md#backtesting)在历史数据上模拟自适应训练，该模块可自动执行再训练\n* **可扩展性** - 通用且强大的架构允许整合 Python 中可用的任何[机器学习库/方法](freqai-configuration.md#using-different-prediction-models)。目前提供八个示例，包括分类器、回归器和卷积神经网络\n* **智能异常值移除** - 使用各种[异常值检测技术](freqai-feature-engineering.md#outlier-detection)从训练和预测数据集中移除异常值\n* **崩溃恢复能力** - 将训练好的模型存储到磁盘，以便从崩溃中快速轻松地重新加载，并[清除过时文件](freqai-running.md#purging-old-model-data)以支持持续的模拟/实盘运行\n* **自动数据归一化** - 以智能且统计安全的方式[归一化数据](freqai-feature-engineering.md#building-the-data-pipeline)\n* **自动数据下载** - 计算数据下载的时间范围并更新历史数据（在实盘部署中）\n* **输入数据清洗** - 在训练和模型推理前安全处理 NaN 值\n* **降维** - 通过[主成分分析](freqai-feature-engineering.md#data-dimensionality-reduction-with-principal-component-analysis)减小训练数据的大小\n* **部署机器人集群** - 设置一个机器人训练模型，同时让一组[消费者](producer-consumer.md)使用信号。\n\n## 快速开始\n\n快速测试 FreqAI 的最简单方法是使用以下命令在模拟模式下运行：",
    "timestamp": "2025-07-31T05:39:13.294256"
  },
  "requirements-docs.txt": {
    "hash": "9c0b544d5da444057f7945e07f93e13e",
    "content": "markdown==3.8.2\nmkdocs==1.6.1\nmkdocs-material==9.6.14\nmdx_truly_sane_lists==1.3\npymdown-extensions==10.16\njinja2==3.1.6\nmike==2.1.3",
    "timestamp": "2025-07-31T05:39:18.476740"
  },
  "installation.md": {
    "hash": "d4000fa0154ed209e84e33d0f6f387cf",
    "content": "# 安装\n\n本页面介绍如何准备运行机器人的环境。\n\nFreqtrade文档描述了多种安装方式：\n\n* [Docker镜像](docker_quickstart.md)（单独页面）\n* [脚本安装](#脚本安装)\n* [手动安装](#手动安装)\n* [使用Conda安装](#使用conda安装)\n\n评估Freqtrade功能时，建议使用预构建的[Docker镜像](docker_quickstart.md)以快速开始。\n\n------\n\n## 重要信息\n\nWindows系统安装请参考[Windows安装指南](windows_installation.md)。\n\n安装和运行Freqtrade最简单的方法是克隆机器人的Github仓库，然后运行`./setup.sh`脚本（如果你的平台支持）。\n\n!!! 注意 \"版本说明\"\n    克隆仓库时，默认工作分支名称为`develop`。该分支包含所有最新功能（由于自动化测试，可以认为相对稳定）。\n    `stable`分支包含最新发布版本的代码（通常每月发布一次，基于`develop`分支约一周前的快照，以防止打包错误，因此可能更稳定）。\n\n!!! 注意\n    假设已安装Python3.10或更高版本以及对应的`pip`。如果未满足，安装脚本会发出警告并停止。还需要`git`来克隆Freqtrade仓库。  \n    此外，必须安装Python头文件（`python<你的版本>-dev` / `python<你的版本>-devel`）才能成功完成安装。\n\n!!! 警告 \"时钟同步\"\n    运行机器人的系统时钟必须准确，需通过NTP服务器频繁同步，以避免与交易所通信时出现问题。\n\n------\n\n## 系统要求\n\n这些要求同时适用于[脚本安装](#脚本安装)和[手动安装](#手动安装)。\n\n!!! 注意 \"ARM64系统\"\n    如果你运行的是ARM64系统（如MacOS M1或Oracle VM），请使用[Docker](docker_quickstart.md)运行Freqtrade。\n    虽然通过手动操作可以进行本地安装，但目前不提供支持。\n\n### 安装指南\n\n* [Python >= 3.10](http://docs.python-guide.org/en/latest/starting/installation/)\n* [pip](https://pip.pypa.io/en/stable/installing/)\n* [git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n* [virtualenv](https://virtualenv.pypa.io/en/stable/installation.html)（推荐）\n* [TA-Lib](https://ta-lib.github.io/ta-lib-python/)（安装说明[下文](#安装-ta-lib)）\n\n### 安装代码\n\n我们提供了Ubuntu、MacOS和Windows系统的安装说明。这些是指导方针，在其他发行版上的成功情况可能有所不同。\n首先列出特定系统的步骤，下方的通用部分对所有系统都是必需的。\n\n!!! 注意\n    假设已安装Python3.10或更高版本以及对应的pip。\n\n=== \"Debian/Ubuntu系统\"\n    #### 安装必要的依赖项",
    "timestamp": "2025-07-31T05:39:23.971698"
  },
  "freqai-configuration.md": {
    "hash": "8becc6f777d54c40d38df5ea7ebf5370",
    "content": "\"freqai\": {\n        \"enabled\": true,\n        \"purge_old_models\": 2,\n        \"train_period_days\": 30,\n        \"backtest_period_days\": 7,\n        \"identifier\" : \"unique-id\",\n        \"feature_parameters\" : {\n            \"include_timeframes\": [\"5m\",\"15m\",\"4h\"],\n            \"include_corr_pairlist\": [\n                \"ETH/USD\",\n                \"LINK/USD\",\n                \"BNB/USD\"\n            ],\n            \"label_period_candles\": 24,\n            \"include_shifted_candles\": 2,\n            \"indicator_periods_candles\": [10, 20]\n        },\n        \"data_split_parameters\" : {\n            \"test_size\": 0.25\n        }\n    }\n",
    "timestamp": "2025-07-31T05:39:24.014948"
  },
  "lookahead-analysis.md": {
    "hash": "aff3e72bdddc1fb7468397e2cfde062e",
    "content": "# 前瞻偏差分析\n\n本页解释如何从前瞻偏差角度验证您的策略。\n\n前瞻偏差是任何策略的祸根，因为引入这种偏差有时非常容易，但却很难检测。\n\n回测会初始化所有时间戳（将整个数据帧加载到内存中）并一次性计算所有指标。\n这意味着如果您的指标或入场/出场信号查看了未来的K线，将会使回测结果失真。\n\n`lookahead-analysis` 命令需要可用的历史数据。\n要了解如何获取您感兴趣的交易对和交易所的数据，请参阅文档的[数据下载](data-download.md)部分。\n`lookahead-analysis` 也支持FreqAI策略。\n\n该命令在内部链接多个回测，并通过探测策略来触发其显示前瞻偏差。\n此过程不直接分析策略代码，而是通过比较指标值的变化以及与完整回测相比入场/出场点的移动来实现。\n\n`lookahead-analysis` 可以使用[回测](backtesting.md)的典型选项，但会强制设置以下选项：\n\n- `--cache` 强制设为 \"none\"。\n- `--max-open-trades` 强制设为至少等于交易对数量。\n- `--dry-run-wallet` 强制设为基本无限（10亿）。\n- `--stake-amount` 强制设为固定的 10000（1万）。\n- `--enable-protections` 强制关闭。\n\n这些设置是为了避免用户意外产生误报。\n\n## 前瞻偏差分析命令参考\n\n--8<-- \"commands/lookahead-analysis.md\"\n\n!!! 注意\n    上述输出已精简为 `lookahead-analysis` 在常规回测命令基础上新增的选项。\n\n### 简介\n\n许多策略在开发者不知情的情况下受到了前瞻偏差的影响。\n这通常会使策略回测看起来有利可图，有时甚至到了极端程度，但这并不现实，因为策略通过查看实盘或模拟交易中无法获得的数据来\"作弊\"。\n\n策略之所以能\"作弊\"，是因为Freqtrade的回测过程在开始时就填充了包含所有K线时间戳的完整数据帧。\n如果开发者不够谨慎，或者不了解内部工作原理（有时确实很难弄清楚），策略就会查看未来数据。\n\n此命令旨在尝试通过上述前瞻偏差来验证策略的有效性。\n\n### 命令工作原理\n\n首先对所有交易对进行回测，生成指标和入场/出场点的基准数据。\n初始回测运行后，会检查是否满足 `minimum-trade-amount`，如果不满足，则取消该策略的前瞻偏差分析。\n如果发生这种情况，请使用更广的时间范围以获取更多用于分析的交易，或使用交易更多的时间范围。\n\n设置基准后，会对每个入场和出场信号分别进行额外的回测。\n验证回测完成后，会比较信号K线（入场或出场）处的指标，并报告偏差。\n所有信号验证或证伪后，会生成结果表供用户查看。\n\n### 如何发现和消除偏差？如何挽救有偏差的策略？\n\n如果您在网上找到一个有偏差的策略，并希望获得相同的结果（但无偏差），大多数情况下可能会失望。\n通常，策略中的偏差是\"好得难以置信\"的利润的驱动因素。\n移除因偏差而推高利润的条件或指标，通常会使策略表现显著变差。\n如果有偏差的指标或条件不是策略的核心，或者存在其他无偏差的入场和出场信号，则可能部分挽救策略。\n\n### 前瞻偏差示例\n\n- `shift(-10)` 会查看未来10根K线。\n- 在 populate_* 函数中使用 `iloc[]` 访问数据帧中的特定行。\n- 如果不严格控制循环范围，for循环容易引入前瞻偏差。\n- 聚合函数如 `.mean()`、`.min()` 和 `.max()`，如果没有滚动窗口，会计算**整个**数据帧的值，因此信号K线会\"看到\"包含未来K线的值。\n  无偏差的示例是使用 `rolling()` 回顾K线：例如 `dataframe['volume_mean_12'] = dataframe['volume'].rolling(12).mean()`\n- `ta.MACD(dataframe, 12, 26, 1)` 当信号周期为1时会引入偏差。\n\n### 结果表各列含义\n\n- `filename`：被检查的策略文件名\n- `strategy`：被检查的策略类名\n- `has_bias`：前瞻偏差分析结果。`No` 表示良好，`Yes` 表示存在偏差。\n- `total_signals`：检查的信号数量（默认20）\n- `biased_entry_signals`：发现有偏差的入场信号数量\n- `biased_exit_signals`：发现有偏差的出场信号数量\n- `biased_indicators`：显示在 populate_indicators 中定义的有偏差指标\n\n如果有偏差的入场信号与出场信号相关联，`biased_exit_signals` 可能会出现误报。\n然而，有偏差的入场通常也会导致出场偏差，即使出场本身没有产生偏差——尤其是当入场和出场条件使用相同的有偏差指标时。\n\n**首先解决入场偏差，然后再处理出场偏差。**\n\n### 注意事项\n\n- `lookahead-analysis` 只能验证/证伪其计算和检查过的交易。\n如果策略有许多不同的信号/信号类型，您需要选择合适的参数以确保所有信号至少触发一次。未触发的信号将不会被验证。\n这可能导致漏报，即策略被报告为无偏差。\n- `lookahead-analysis` 可以使用相同的回测选项，这可能引入问题。\n请不要使用启用仓位叠加等选项，因为这会扭曲检查的信号数量。\n如果您决定使用，请确保不会用尽 `max_open_trades`  slots，且回测钱包配置中有足够的资金。\n- 在结果表中，`biased_indicators` 列会错误地将 `set_freqai_targets()` 中定义的FreqAI目标指标标记为有偏差。\n**这些指标没有偏差，可以安全忽略。**",
    "timestamp": "2025-07-31T05:39:27.139766"
  },
  "recursive-analysis.md": {
    "hash": "cf7e70184d7d252a9e12c655cb3c276a",
    "content": "# 递归分析\n\n本文档解释如何验证策略中因某些指标的递归问题而导致的不准确性。\n\n递归公式是指序列中的任一项由其前一项（或多项）定义。例如，递归公式可以表示为a<sub>n</sub> = a<sub>n-1</sub> + b。\n\n为什么这对Freqtrade很重要？在回测中，机器人会根据指定的时间范围获取交易对的完整数据。但在模拟/实盘运行中，机器人的数据量会受限于交易所提供的数据量。\n\n例如，计算一个非常基础的指标`steps`：第一行的值始终为0，后续行的值等于前一行的值加1。如果使用最近1000根K线计算，那么第一行的`steps`值为0，最后一根已收盘K线的`steps`值为999。\n\n如果仅使用最近500根K线计算会怎样？此时最后一根已收盘K线的`steps`值将是499，而非999。这种数值差异会导致回测结果与模拟/实盘结果不一致。\n\n`recursive-analysis`命令需要可用的历史数据。要了解如何获取感兴趣的交易对和交易所的数据，请参阅文档的[数据下载](data-download.md)部分。\n\n该命令通过准备不同长度的数据并基于这些数据计算指标来工作。它不会回测策略本身，而仅计算指标。在计算不同启动K线数量（`startup_candle_count`）的指标后，会比较所有指定`startup_candle_count`下最后一行的值，以查看它们与基准计算相比的偏差程度。\n\n命令设置：\n\n- 使用`-p`选项设置你想要分析的交易对。由于我们仅查看指标值，使用多个交易对是多余的。建议使用价格相对较高且波动性适中的交易对（如BTC或ETH），以避免舍入问题导致结果不准确。如果命令未设置交易对，将使用白名单中的第一个交易对进行分析。\n- 建议设置较长的时间范围（至少5000根K线），以便用作基准的初始指标计算本身具有极小或无递归问题。例如，对于5分钟时间框架，5000根K线相当于18天。\n- `--cache`被强制设为\"none\"，以避免自动加载之前的指标计算结果。\n\n除了递归公式检查外，此命令还会对指标值进行简单的前瞻偏差检查。如需完整的前瞻检查，请使用[前瞻分析](lookahead-analysis.md)。\n\n## 递归分析命令参考\n\n--8<-- \"commands/recursive-analysis.md\"\n\n### 为什么默认启动K线数量是奇数？\n\n启动K线的默认值是奇数。当机器人从交易所API获取K线数据时，最后一根K线是机器人要检查的K线，其余数据为\"启动K线\"。\n\n例如，Binance允许每次API调用返回1000根K线。当机器人收到1000根K线时，最后一根是\"当前K线\"，前999根是\"启动K线\"。如果将启动K线数量设置为1000而非999，机器人将尝试获取1001根K线。此时交易所API会分页返回数据（对于Binance API，会分为两组：一组1000根，一组1根）。这导致机器人认为策略需要1001根K线数据，因此会下载2000根K线，即1根\"当前K线\"和1999根\"启动K线\"。\n\n此外，交易所会限制连续批量API调用的次数（如Binance允许5次调用）。在这种情况下，从Binance API最多可下载5000根K线而不触发API速率限制，这意味着`startup_candle_count`的最大值为4999。\n\n请注意，交易所可能会在未事先通知的情况下更改此K线限制。\n\n### 命令工作原理\n\n- 首先，使用提供的时间范围进行初始指标计算，生成指标值的基准。\n- 设置基准后，会对每个不同的启动K线数量执行额外计算。\n- 然后，命令会比较最后一行K线的指标值，并在表格中报告差异。\n\n## 理解递归分析输出\n\n以下是至少一个指标存在递归公式问题的输出结果表示例：",
    "timestamp": "2025-07-31T05:39:44.024096"
  },
  "sql_cheatsheet.md": {
    "hash": "73faf629a0a75019146c70e12b719648",
    "content": "# SQL 助手\n\n如果您想查询您的SQLite数据库，本页包含一些帮助信息。\n\n!!! Tip \"其他数据库系统\"\n    要使用其他数据库系统（如PostgreSQL或MariaDB），您可以使用相同的查询，但需要使用相应数据库系统的客户端。[点击此处](advanced-setup.md#use-a-different-database-system)了解如何使用Freqtrade设置不同的数据库系统。\n\n!!! Warning\n    如果您不熟悉SQL，在数据库上运行查询时应格外小心。  \n    运行任何查询前，请务必备份您的数据库。\n\n## 安装 sqlite3\n\nSqlite3是一个基于终端的SQLite应用程序。\n如果您更喜欢可视化数据库编辑器，也可以使用SqliteBrowser等工具。\n\n### Ubuntu/Debian 安装",
    "timestamp": "2025-07-31T05:39:48.567126"
  },
  "plotting.md": {
    "hash": "8b14a391e179e0818d94ac9639ea8049",
    "content": "## 绘制价格和指标\n\n`freqtrade plot-dataframe` 子命令显示一个包含三个子图的交互式图表：\n\n* 主图包含K线和跟随价格的指标（如sma/ema）\n* 成交量柱状图\n* 由 `--indicators2` 指定的额外指标\n\n![plot-dataframe](assets/plot-dataframe.png)\n\n可能的参数：\n\n--8<-- \"commands/plot-dataframe.md\"\n\n示例：",
    "timestamp": "2025-07-31T05:39:55.987567"
  },
  "backtesting.md": {
    "hash": "02d3e7c04864cfb6f707eb68a3a9f916",
    "content": "freqtrade backtesting --strategy AwesomeStrategy\n| Market change               | -5.88%              |\n=====================================================\n然而，Freqtrade没有关于历史限制的信息。\n\n这可能导致使用历史价格夸大交易限制的情况，导致最小金额超过50美元。\n\n例如：\n\nBTC的最小可交易金额为0.001。\nBTC今日交易价格为22,000美元（0.001 BTC与此相关）——但回测期间包含高达50,000美元的价格。\n今日的最小值为`0.001 * 22_000`——即22美元。  \n然而，在某些历史设定中，基于`0.001 * 50_000`，限制也可能是50美元。\n\n#### 交易精度限制\n\n大多数交易所对价格和数量都有精度限制，因此你不能购买1.0020401的交易对，或按1.24567123123的价格购买。  \n相反，这些价格和数量将根据交易所定义进行四舍五入或截断，以符合规定的交易精度。\n例如，上述值可能会四舍五入为数量1.002和价格1.24567。\n\n这些精度值基于当前交易所的限制（如[上述部分](#trading-limits-in-backtesting)所述），因为历史精度限制不可用。\n\n## 提高回测准确性\n\n回测的一个主要限制是无法知道价格在K线内的变动情况（高点在收盘前出现，还是相反？）。\n因此，假设你使用1小时时间框架进行回测，该K线将有4个价格（开盘价、最高价、最低价、收盘价）。\n\n虽然回测对此做出了一些假设（见上文），但这永远不可能完美，并且总会以某种方式存在偏差。\n为了缓解这一问题，freqtrade可以使用更低（更快）的时间框架来模拟K线内的变动。\n\n要使用此功能，你可以在常规回测命令后附加`--timeframe-detail 5m`。",
    "timestamp": "2025-07-31T05:39:57.151748"
  },
  "producer-consumer.md": {
    "hash": "5232700d9af6c4eca0836f284af1eb38",
    "content": "# 生产者/消费者模式\n\nfreqtrade提供了一种机制，通过消息WebSocket，一个实例（也称为`consumer`，消费者）可以监听上游freqtrade实例（也称为`producer`，生产者）发送的消息。主要包括`analyzed_df`（已分析数据框）和`whitelist`（白名单）消息。这允许在多个机器人中重用为交易对计算的指标（和信号），而无需多次计算。\n\n有关设置消息WebSocket的`api_server`配置（即生产者配置），请参见REST API文档中的[消息WebSocket](rest-api.md#message-websocket)部分。\n\n!!! 注意\n    我们强烈建议将`ws_token`设置为随机且仅自己知道的值，以避免对您的机器人的未授权访问。\n\n## 配置\n\n要启用订阅实例，请在消费者的配置文件中添加`external_message_consumer`部分。",
    "timestamp": "2025-07-31T05:40:00.965534"
  },
  "strategy-101.md": {
    "hash": "f7100436785f1c4ac52455a6f406e648",
    "content": "dataframe['rsi'] = ta.RSI(dataframe)",
    "timestamp": "2025-07-31T05:40:19.254905"
  },
  "stoploss.md": {
    "hash": "af3bc8792a005616eac1cbb63a5ec7d0",
    "content": "# 止损\n\n`stoploss` 配置参数是一个触发卖出的亏损比例。\n例如，值 `-0.10` 会导致当某笔交易的利润跌破 -10% 时立即卖出。此参数为可选。\n止损计算包含手续费，因此 -10% 的止损会精确地设置在入场价下方 10% 的位置。\n\n大多数策略文件已包含优化的 `stoploss` 值。\n\n!!! 信息\n    本文档中提到的所有止损属性都可以在策略或配置中设置。  \n    <ins>配置值将覆盖策略值。</ins>\n\n## 交易所/Freqtrade 止损\n\n止损模式可以是 *交易所内* 或 *交易所外*。\n\n这些模式可通过以下值配置：",
    "timestamp": "2025-07-31T05:40:27.788431"
  },
  "strategy-advanced.md": {
    "hash": "4c0c7a42ad4b507ac847970df9bf6e03",
    "content": "from freqtrade.persistence import Trade\nfrom datetime import timedelta\n\nclass AwesomeStrategy(IStrategy):\n\n    def bot_loop_start(self, **kwargs) -> None:\n        # 遍历所有有未结订单的交易\n        for trade in Trade.get_open_order_trades():\n            # 选择交易入场方向的已成交订单\n            fills = trade.select_filled_orders(trade.entry_side)\n            if trade.pair == 'ETH/USDT':\n                # 获取交易的入场类型自定义数据\n                trade_entry_type = trade.get_custom_data(key='entry_type')\n                if trade_entry_type is None:\n                    # 如果入场标签包含'entry_1'，则入场类型为'突破'，否则为'回调'\n                    trade_entry_type = 'breakout' if 'entry_1' in trade.enter_tag else 'dip'\n                elif fills > 1:\n                    # 如果成交次数大于1，入场类型为'追涨'\n                    trade_entry_type = 'buy_up'\n                # 设置交易的入场类型自定义数据\n                trade.set_custom_data(key='entry_type', value=trade_entry_type)\n        return super().bot_loop_start(**kwargs)\n\n    def adjust_entry_price(self, trade: Trade, order: Order | None, pair: str,\n                           current_time: datetime, proposed_rate: float, current_order_rate: float,\n                           entry_tag: str | None, side: str, **kwargs) -> float:\n        # 对于BTC/USDT交易对，在入场触发后的前10分钟内，限价单使用并跟随SMA200作为价格目标。\n        if (\n            pair == 'BTC/USDT' \n            and entry_tag == 'long_sma200' \n            and side == 'long' \n            and (current_time - timedelta(minutes=10)) > trade.open_date_utc \n            and order.filled == 0.0\n        ):\n            # 获取分析后的交易对数据框\n            dataframe, _ = self.dp.get_analyzed_dataframe(pair=pair, timeframe=self.timeframe)\n            # 获取最后一根K线\n            current_candle = dataframe.iloc[-1].squeeze()\n            # 存储入场价格调整次数的信息\n            existing_count = trade.get_custom_data('num_entry_adjustments', default=0)\n            if not existing_count:\n                existing_count = 1\n            else:\n                existing_count += 1\n            trade.set_custom_data(key='num_entry_adjustments', value=existing_count)\n\n            # 调整订单价格\n            return current_candle['sma_200']\n\n        # 默认：维持现有订单价格\n        return current_order_rate\n\n    def custom_exit(self, pair: str, trade: Trade, current_time: datetime, current_rate: float, current_profit: float, **kwargs):\n\n        entry_adjustment_count = trade.get_custom_data(key='num_entry_adjustments')\n        trade_entry_type = trade.get_custom_data(key='entry_type')\n        if entry_adjustment_count is None:\n            # 如果没有入场调整次数数据，且利润大于1%且交易已开仓超过100分钟，则退出\n            if current_profit > 0.01 and (current_time - timedelta(minutes=100) > trade.open_date_utc):\n                return True, 'exit_1'\n        else:\n            # 如果入场调整次数大于0且利润大于5%，则退出\n            if entry_adjustment_count > 0 and current_profit > 0.05:\n                return True, 'exit_2'\n            # 如果入场类型为突破且利润大于10%，则退出\n            if trade_entry_type == 'breakout' and current_profit > 0.1:\n                return True, 'exit_3'\n\n        return False, None",
    "timestamp": "2025-07-31T05:40:49.925487"
  },
  "strategy_analysis_example.md": {
    "hash": "0d4e7129477b4d510bac1a887fdcacfb",
    "content": "import os\nfrom pathlib import Path\n\n\n# 更改目录\n# 修改此单元格以确保输出显示正确的路径。\n# 相对于单元格输出中显示的项目根目录定义所有路径\nproject_root = \"somedir/freqtrade\"\ni = 0\ntry:\n    os.chdir(project_root)\n    if not Path(\"LICENSE\").is_file():\n        i = 0\n        while i < 4 and (not Path(\"LICENSE\").is_file()):\n            os.chdir(Path(Path.cwd(), \"../\"))\n            i += 1\n        project_root = Path.cwd()\nexcept FileNotFoundError:\n    print(\"请定义相对于当前目录的项目根目录\")\nprint(Path.cwd())",
    "timestamp": "2025-07-31T05:40:55.965176"
  },
  "rest-api.md": {
    "hash": "266405be838288f8d1af48285a3edfa7",
    "content": "!!! Danger \"安全警告\"\n    默认情况下，配置仅监听本地主机（因此其他系统无法访问）。我们强烈建议不要将此API暴露到互联网，并选择一个强且唯一的密码，因为其他人可能会控制您的机器人。\n\n??? Note \"远程服务器上的API/UI访问\"\n    如果您在VPS上运行，应考虑使用SSH隧道或设置VPN（openVPN、wireguard）来连接机器人。\n    这将确保FreqUI不会直接暴露在互联网上，出于安全原因不建议这样做（FreqUI本身不支持HTTPS）。\n    这些工具的设置不在本教程范围内，但互联网上有许多很好的教程可供参考。\n\n然后，您可以在浏览器中访问`http://127.0.0.1:8080/api/v1/ping`来检查API是否正常运行。\n这应该返回以下响应：",
    "timestamp": "2025-07-31T05:40:59.584172"
  },
  "updating.md": {
    "hash": "9cc4ed85e3a6337053ba2f76f2669623",
    "content": "# 如何更新\n\n要更新您的Freqtrade安装，请使用以下对应于您安装方式的方法之一。\n\n!!! Note \"跟踪变更\"\n    重大变更/行为变更将记录在每个版本附带的更新日志中。\n    对于develop分支，请关注PR以避免对变更感到意外。\n\n## Docker\n\n!!! Note \"使用`master`镜像的旧版安装\"\n    我们将发布镜像从master切换到stable - 请调整您的docker-file并将`freqtradeorg/freqtrade:master`替换为`freqtradeorg/freqtrade:stable`",
    "timestamp": "2025-07-31T05:41:05.384724"
  },
  "trade-object.md": {
    "hash": "da5f833b35ddc9a6d0250be60f4f5b9e",
    "content": "# 交易对象 (Trade Object)\n\n## 交易 (Trade)\n\nFreqtrade 进入的仓位存储在 `Trade` 对象中 - 该对象会持久化到数据库。\n这是 Freqtrade 的核心概念 - 你会在文档的许多部分遇到它，这些部分很可能会指向此处。\n\n它会通过许多 [策略回调](strategy-callbacks.md) 传递给策略。传递给策略的对象不能直接修改。间接修改可能会根据回调结果发生。\n\n## 交易 - 可用属性 (Trade - Available attributes)\n\n每个交易都有以下属性/特性，可通过 `trade.<property>` 使用（例如 `trade.pair`）。\n\n| 属性 (Attribute) | 数据类型 (DataType) | 描述 (Description) |\n|------------|-------------|-------------|\n| `pair` | string | 此交易的交易对。 |\n| `is_open` | boolean | 交易当前是否为开仓状态，或已结束。 |\n| `open_rate` | float | 交易的入场价格（若有交易调整，为平均入场价格）。 |\n| `close_rate` | float | 平仓价格 - 仅在 is_open = False 时设置。 |\n| `stake_amount` | float | 基础货币（或报价货币）的金额。 |\n| `amount` | float | 当前持有的资产/基准货币数量。在初始订单成交前为 0.0。 |\n| `open_date` | datetime | 交易开仓时间戳 **请改用 `open_date_utc`** |\n| `open_date_utc` | datetime | 交易开仓时间戳 - UTC 时区。 |\n| `close_date` | datetime | 交易平仓时间戳 **请改用 `close_date_utc`** |\n| `close_date_utc` | datetime | 交易平仓时间戳 - UTC 时区。 |\n| `close_profit` | float | 交易平仓时的相对利润。`0.01` 等于 1% |\n| `close_profit_abs` | float | 交易平仓时的绝对利润（以基础货币计）。 |\n| `realized_profit` | float | 交易仍为开仓状态时已实现的绝对利润（以基础货币计）。 |\n| `leverage` | float | 此交易使用的杠杆 - 现货市场默认值为 1.0。 |\n| `enter_tag` | string | 通过数据框中的 `enter_tag` 列在入场时提供的标签。 |\n| `is_short` | boolean | 若为做空交易则为 True，否则为 False。 |\n| `orders` | Order[] | 附加到此交易的订单对象列表（包括已成交和已取消的订单）。 |\n| `date_last_filled_utc` | datetime | 最后一笔成交订单的时间。 |\n| `entry_side` | \"buy\" / \"sell\" | 交易入场的订单方向。 |\n| `exit_side` | \"buy\" / \"sell\" | 导致交易离场/仓位减少的订单方向。 |\n| `trade_direction` | \"long\" / \"short\" | 交易方向文本 - 做多或做空。 |\n| `nr_of_successful_entries` | int | 成功（已成交）的入场订单数量。 |\n| `nr_of_successful_exits` | int | 成功（已成交）的离场订单数量。 |\n| `has_open_orders` | boolean | 交易是否有未成交订单（不包括止损订单）。 |\n\n## 类方法 (Class methods)\n\n以下是类方法 - 返回通用信息，通常会对数据库执行显式查询。\n可通过 `Trade.<method>` 调用 - 例如 `open_trades = Trade.get_open_trade_count()`\n\n!!! Warning \"回测/超参数优化 (Backtesting/hyperopt)\"\n    大多数方法在回测/超参数优化以及实盘/模拟交易模式下都能工作。\n    在回测期间，仅限于在[策略回调](strategy-callbacks.md)中使用。在`populate_*()`方法中使用不受支持，会导致错误结果。\n\n### get_trades_proxy\n\n当策略需要现有（开仓或平仓）交易的某些信息时 - 最好使用 `Trade.get_trades_proxy()`。\n\n用法示例：",
    "timestamp": "2025-07-31T05:41:10.743884"
  },
  "windows_installation.md": {
    "hash": "5dce7bd3bbffe63644e7ebbaad76c42d",
    "content": "# Windows 安装\n\n我们**强烈**建议 Windows 用户使用 [Docker](docker_quickstart.md)，因为这样会更简单、更流畅（也更安全）。\n\n如果无法使用 Docker，请尝试使用 Windows Linux 子系统（WSL）——Ubuntu 的安装说明应该适用。否则，请按照以下说明操作。\n\n所有说明均假设已安装并可使用 Python 3.10+。\n\n## 克隆 git 仓库\n\n首先通过运行以下命令克隆仓库：",
    "timestamp": "2025-07-31T05:41:47.191334"
  },
  "leverage.md": {
    "hash": "600c4d0b90efd0ea4046539e677a43e3",
    "content": "# 杠杆交易\n\n!!! Warning \"测试功能\"\n    此功能仍处于测试阶段。如果您发现任何问题，请通过Discord或Github Issue告知我们。\n\n!!! Note \"一个账户运行多个机器人\"\n    您不能在同一个账户上运行2个使用杠杆的机器人。对于杠杆/保证金交易，Freqtrade假设它是该账户的唯一使用者，所有平仓水位均基于此假设计算。\n\n!!! Danger \"杠杆交易风险极高\"\n    不要使用杠杆倍数>1的策略，除非该策略已在现货市场的实盘运行中显示出积极结果。请检查您策略的止损设置。使用2倍杠杆时，0.5（50%）的止损设置过低，这些交易可能在达到止损前就被平仓。\n    对于因使用本软件或此模式而造成的任何损失，我们不承担任何责任。\n\n    请仅在您了解Freqtrade（和您的策略）工作原理后再使用高级交易模式。\n    此外，永远不要冒险投入超过您能承受损失的资金。\n\n如果您已有现有策略，请阅读[策略迁移指南](strategy_migration.md#strategy-migration-between-v2-and-v3)，将您的策略从Freqtrade v2策略迁移到支持做空和期货交易的v3版本策略。\n\n## 做空\n\n当[`trading_mode`](#杠杆交易模式)设置为`spot`（现货）时，无法进行做空。要进行做空交易，`trading_mode`必须设置为`margin`（当前不可用）或[`futures`](#期货)，同时[`margin_mode`](#保证金模式)设置为`cross`（当前不可用）或[`isolated`](#逐仓保证金模式)。\n\n策略要支持做空，策略类必须设置类变量`can_short = True`。\n\n请阅读[策略自定义](strategy-customization.md#entry-signal-rules)，了解如何设置进入和退出做空交易的信号。\n\n## 理解`trading_mode`\n\n可能的值包括：`spot`（默认）、`margin`（当前不可用）或`futures`（期货）。\n\n### 现货（Spot）\n\n常规交易模式（低风险）\n\n- 仅做多交易（不支持做空）。\n- 无杠杆。\n- 无平仓风险。\n- 盈利/亏损等于资产价值的变化（减去交易费用）。\n\n### 杠杆交易模式\n\n使用杠杆时，交易者从交易所借入资金。必须向交易所全额偿还借入的资金（可能包含利息），交易者保留使用借入资金进行交易所产生的任何利润，或承担任何损失。\n\n由于必须偿还借入资金，当杠杆账户中的资产总价值降至某个点（此时损失总额小于交易者在杠杆账户中实际拥有的保证金价值）时，交易所将**平仓**（强制出售交易者的资产），以确保交易者有足够资金向交易所偿还借入的资产。交易所还会收取**平仓费用**，增加交易者的损失。\n\n因此，**如果您不完全了解自己在做什么，请不要进行杠杆交易。杠杆交易风险极高，可能导致您的资产价值迅速归零，且无法恢复。**\n\n#### 保证金（Margin，当前不可用）\n\n在现货市场进行交易，但交易所按选定的杠杆倍数向您借出货币。您需向交易所偿还借出的金额并支付利息，您的盈利/亏损将乘以指定的杠杆倍数。\n\n#### 期货（Futures）\n\n永续合约（也称为永续期货）是一种以与标的资产价格紧密挂钩的价格进行交易的合约。您交易的不是实际资产，而是衍生品合约。与期货或期权合约不同，永续合约可以无限期持有。\n\n除了期货合约价格变动带来的盈亏外，交易者还需交换_资金费用_，这是根据期货合约与标的资产之间的价格差异计算的盈亏金额。期货合约与标的资产之间的价格差异因交易所而异。\n\n要在期货市场交易，您必须将`trading_mode`设置为\"futures\"。\n您还必须选择\"保证金模式\"（下文解释）——Freqtrade目前仅支持逐仓保证金。",
    "timestamp": "2025-07-31T05:41:47.795729"
  },
  "webhook-config.md": {
    "hash": "59df82921f117c8750a5e0883b57552e",
    "content": "# Webhook 使用方法\n\n## 配置\n\n通过在配置文件中添加webhook部分并将`webhook.enabled`设置为`true`来启用webhooks。\n\n示例配置（使用IFTTT测试通过）。",
    "timestamp": "2025-07-31T05:41:49.863309"
  },
  "telegram-usage.md": {
    "hash": "03763f4b996980e667120255cbdd0e28",
    "content": "对于 Freqtrade 配置，您可以将完整值（包括 `-`）用作字符串：",
    "timestamp": "2025-07-31T05:41:57.262183"
  },
  "hyperopt.md": {
    "hash": "4d917b45440333bc8a1985e4d67b7ac9",
    "content": "source .venv/bin/activate\npip install -r requirements-hyperopt.txt\nbuy_ema_short = IntParameter(3, 50, default=5)\n    buy_ema_long = IntParameter(15, 200, default=50)\n\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"生成策略使用的所有指标\"\"\"\n        \n        # 计算所有ema_short值\n        for val in self.buy_ema_short.range:\n            dataframe[f'ema_short_{val}'] = ta.EMA(dataframe, timeperiod=val)\n        \n        # 计算所有ema_long值\n        for val in self.buy_ema_long.range:\n            dataframe[f'ema_long_{val}'] = ta.EMA(dataframe, timeperiod=val)\n        \n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        conditions = []\n        conditions.append(qtpylib.crossed_above(\n                dataframe[f'ema_short_{self.buy_ema_short.value}'], dataframe[f'ema_long_{self.buy_ema_long.value}']\n            ))\n\n        # 检查成交量不为0\n        conditions.append(dataframe['volume'] > 0)\n\n        if conditions:\n            dataframe.loc[\n                reduce(lambda x, y: x & y, conditions),\n                'enter_long'] = 1\n        return dataframe\n\n    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        conditions = []\n        conditions.append(qtpylib.crossed_above(\n                dataframe[f'ema_long_{self.buy_ema_long.value}'], dataframe[f'ema_short_{self.buy_ema_short.value}']\n            ))\n\n        # 检查成交量不为0\n        conditions.append(dataframe['volume'] > 0)\n\n        if conditions:\n            dataframe.loc[\n                reduce(lambda x, y: x & y, conditions),\n                'exit_long'] = 1\n        return dataframe\n读取命令（`hyperopt-list`、`hyperopt-show`）可以使用 `--hyperopt-filename <filename>` 来读取和显示旧的超参数优化结果。\n    你可以使用 `ls -l user_data/hyperopt_results/` 命令查看文件名列表。\n\n### 使用不同的历史数据源执行超参数优化\n\n如果你想使用磁盘上已有的备用历史数据集来优化参数，可以使用 `--datadir PATH` 选项。默认情况下，超参数优化使用 `user_data/data` 目录中的数据。\n\n### 使用较小的测试集运行超参数优化\n\n使用 `--timerange` 参数可以更改要使用的测试集范围。\n例如，要使用一个月的数据，可以在超参数优化命令中传递 `--timerange 20210101-20210201`（从2021年1月到2021年2月）。\n\n完整命令：\n默认情况下，超参数优化（hyperopt）模拟Freqtrade实盘运行/模拟运行的行为，即每个交易对只允许一个未平仓订单。所有交易对的未平仓订单总数也受`max_open_trades`设置限制。在超参数优化/回测期间，这可能导致潜在订单被已有的未平仓订单隐藏（或掩盖）。\n\n`--eps`/`--enable-position-stacking`参数允许模拟多次买入同一交易对。将`--max-open-trades`设置为非常高的数值将禁用未平仓订单数量限制。\n\n!!! Note\n    模拟/实盘运行**不会**使用仓位叠加——因此，在不启用此功能的情况下验证策略也是有意义的，因为这更接近实际情况。\n\n你也可以在配置文件中通过显式设置`\"position_stacking\"=true`来启用仓位叠加。\n\n## 内存不足错误\n\n由于超参数优化消耗大量内存（每个并行回测进程需要将完整数据一次性加载到内存中），你可能会遇到“内存不足”错误。为解决这些问题，你有多种选择：\n\n* 减少交易对数量。\n* 减少使用的时间范围（`--timerange <timerange>`）。\n* 避免使用`--timeframe-detail`（这会将大量额外数据加载到内存中）。\n* 减少并行进程数量（`-j <n>`）。\n* 增加机器内存。\n* 如果你使用了很多带有`.range`功能的参数，请使用`--analyze-per-epoch`。\n\n\n## 目标函数此前已在该点评估过\n\n如果你看到`The objective has been evaluated at this point before.`——这表明你的参数空间已耗尽，或接近耗尽。基本上，参数空间中的所有点都已被尝试（或已达到局部最小值）——超参数优化不再能找到多维空间中尚未尝试的点。Freqtrade尝试通过在这种情况下使用新的随机点来解决“局部最小值”问题。\n\n示例：",
    "timestamp": "2025-07-31T05:42:01.966248"
  },
  "utils.md": {
    "hash": "c771828070f1995cc6cd0b71d65df853",
    "content": "# 实用子命令\n\n除了实盘交易和模拟交易（Dry-Run）运行模式、`backtesting`（回测）和`hyperopt`（超参数优化）子命令，以及用于准备历史数据的`download-data`子命令外，机器人还包含多个实用子命令。本节将对它们进行介绍。\n\n## 创建用户目录（userdir）\n\n创建用于存放freqtrade文件的目录结构。还会创建策略和超参数优化示例，帮助你快速开始。可多次使用——使用`--reset`会将示例策略和超参数优化文件重置为默认状态。\n\n--8<-- \"commands/create-userdir.md\"\n\n!!! Warning\n    使用`--reset`可能导致数据丢失，因为这会覆盖所有示例文件，且不会再次询问确认。",
    "timestamp": "2025-07-31T05:42:05.795331"
  },
  "commands\\convert-db.md": {
    "hash": "4ed3567b49964f7ee559f2174e923f17",
    "content": "用法: freqtrade convert-db [-h] [--db-url PATH] [--db-url-from PATH]\n\n选项:\n  -h, --help          显示此帮助消息并退出\n  --db-url PATH       覆盖交易数据库URL，这在自定义部署中很有用（默认值：实盘运行模式为`sqlite:///tradesv3.sqlite`，模拟运行为`sqlite:///tradesv3.dryrun.sqlite`）。\n  --db-url-from PATH  迁移数据库时使用的源数据库URL。",
    "timestamp": "2025-07-31T05:42:08.928736"
  },
  "commands\\backtesting-analysis.md": {
    "hash": "fcecc79c7fb68a5c81c56f0ea08578ed",
    "content": "usage: freqtrade backtesting-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                      [-V] [-c PATH] [-d PATH]\n                                      [--userdir PATH]\n                                      [--export-filename PATH]\n                                      [--analysis-groups {0,1,2,3,4,5} [{0,1,2,3,4,5} ...]]\n                                      [--enter-reason-list ENTER_REASON_LIST [ENTER_REASON_LIST ...]]\n                                      [--exit-reason-list EXIT_REASON_LIST [EXIT_REASON_LIST ...]]\n                                      [--indicator-list INDICATOR_LIST [INDICATOR_LIST ...]]\n                                      [--entry-only] [--exit-only]\n                                      [--timerange TIMERANGE]\n                                      [--rejected-signals] [--analysis-to-csv]\n                                      [--analysis-csv-path ANALYSIS_CSV_PATH]\n\n选项:\n  -h, --help            显示此帮助信息并退出\n  --export-filename PATH, --backtest-filename PATH\n                        回测结果文件的文件名（用于加载分析数据）。\n                        示例: `--export-filename=user_data/backtest_results/backtest_today.json`\n  --analysis-groups {0,1,2,3,4,5} [{0,1,2,3,4,5} ...]\n                        分组输出 - 0: 按入场标签的简单盈亏分析, 1: 按入场标签分析,\n                        2: 按入场标签和出场标签分析, 3: 按交易对和入场标签分析,\n                        4: 按交易对、入场和出场标签分析(结果可能较大), 5: 按出场标签分析\n  --enter-reason-list ENTER_REASON_LIST [ENTER_REASON_LIST ...]\n                        要分析的入场原因（标签）空格分隔列表。默认: 所有。\n                        例如: 'entry_tag_a entry_tag_b'\n  --exit-reason-list EXIT_REASON_LIST [EXIT_REASON_LIST ...]\n                        要分析的出场原因（标签）空格分隔列表。默认: 所有。\n                        例如: 'exit_tag_a roi stop_loss trailing_stop_loss'\n  --indicator-list INDICATOR_LIST [INDICATOR_LIST ...]\n                        要分析的指标空格分隔列表。例如:\n                        'close rsi bb_lowerband profit_abs'\n  --entry-only          仅分析入场原因（标签）。\n  --exit-only           仅分析出场原因（标签）。\n  --timerange TIMERANGE\n                        指定要分析的数据时间范围。\n  --rejected-signals    分析被拒绝的交易信号\n  --analysis-to-csv     将选定的分析表格保存为单独的CSV文件\n  --analysis-csv-path ANALYSIS_CSV_PATH\n                        启用--analysis-to-csv时，指定保存分析CSV文件的路径。\n                        默认: user_data/backtesting_results/\n\n通用参数:\n  -v, --verbose         详细模式(-vv 更详细, -vvv 显示所有消息)。\n  --no-color            禁用输出内容的颜色显示。当输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        日志输出到指定文件。特殊值: 'syslog', 'journald'。\n                        更多详情请参见文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件(默认: `userdir/config.json` 或 `config.json`，以存在者为准)。\n                        可以使用多个--config选项。可以设置为`-`从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含历史回测数据的交易所基础目录路径。要查看期货数据，\n                        需额外使用trading-mode参数。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:42:13.424409"
  },
  "commands\\convert-data.md": {
    "hash": "5ef251318344320b5cb1beff2ccc9774",
    "content": "",
    "timestamp": "2025-07-31T05:42:14.060784"
  },
  "commands\\create-userdir.md": {
    "hash": "13bff6d5788a7d458b9f1afb78c54e9b",
    "content": "usage: freqtrade create-userdir [-h] [--userdir PATH] [--reset]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  --reset               将示例文件重置为原始状态。",
    "timestamp": "2025-07-31T05:42:14.179506"
  },
  "commands\\convert-trade-data.md": {
    "hash": "8710e53f3607b600eabb50d59cec21a2",
    "content": "usage: freqtrade convert-trade-data [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-p PAIRS [PAIRS ...]] --format-from\n                                    {json,jsongz,feather,parquet,kraken_csv}\n                                    --format-to {json,jsongz,feather,parquet}\n                                    [--erase] [--exchange EXCHANGE]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --format-from {json,jsongz,feather,parquet,kraken_csv}\n                        数据转换的源格式。\n  --format-to {json,jsongz,feather,parquet}\n                        数据转换的目标格式。\n  --erase               清除所选交易所/交易对/时间框架的所有现有数据。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置文件时有效。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，这可能很有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值包括：'syslog'、'journald'。详见文档获取更多信息。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，取先存在的那个）。可使用多个 --config 选项。可设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。若要查看期货数据，需额外使用交易模式参数。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:42:23.634684"
  },
  "commands\\backtesting-show.md": {
    "hash": "c1799850e4a5ceefee597c4d0bfe5186",
    "content": "用法: freqtrade backtesting-show [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                  [-c PATH] [-d PATH] [--userdir PATH]\n                                  [--export-filename PATH] [--show-pair-list]\n                                  [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n\n选项:\n  -h, --help            显示此帮助信息并退出\n  --export-filename PATH, --backtest-filename PATH\n                        使用此文件名保存回测结果。需要同时设置`--export`。\n                        示例: `--export-filename=user_data/backtest_results/backtest_today.json`\n  --show-pair-list      显示按利润排序的回测交易对列表。\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        按[日、周、月、年]显示回测细目。\n\n通用参数:\n  -v, --verbose         详细模式(-vv 更多, -vvv 获取所有消息)。\n  --no-color            禁用输出结果的颜色显示。如果将输出重定向到文件可能有用。\n  --logfile FILE, --log-file FILE\n                        日志输出到指定文件。特殊值: 'syslog', 'journald'。\n                        更多详情请参见文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件(默认: `userdir/config.json` 或 `config.json`，以存在者为准)。\n                        可以使用多个--config选项。可以设置为`-`从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含历史回测数据的交易所基础目录路径。要查看期货数据，\n                        需额外使用trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:42:28.635303"
  },
  "commands\\install-ui.md": {
    "hash": "fc9aa472b3cbd464e490030f42570bbb",
    "content": "usage: freqtrade install-ui [-h] [--erase] [--prerelease]\n                            [--ui-version UI_VERSION]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --erase               清理UI文件夹，不下载新版本。\n  --prerelease          安装FreqUI的最新预发布版本。不建议用于生产环境。\n  --ui-version UI_VERSION\n                        指定要安装的FreqUI特定版本。不指定此选项将安装最新版本。",
    "timestamp": "2025-07-31T05:42:38.129071"
  },
  "commands\\hyperopt-show.md": {
    "hash": "6fc2ebf1bee8736e4cb2608f28afb128",
    "content": "usage: freqtrade hyperopt-show [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH] [--best]\n                               [--profitable] [-n INT] [--print-json]\n                               [--hyperopt-filename FILENAME] [--no-header]\n                               [--disable-param-export]\n                               [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --best                仅选择最佳轮次。\n  --profitable          仅选择盈利的轮次。\n  -n INT, --index INT   指定要打印详细信息的轮次索引。\n  --print-json          以JSON格式打印输出。\n  --hyperopt-filename FILENAME\n                        超参数优化结果文件名。示例：`--hyperopt-\n                        filename=hyperopt_results_2020-09-27_16-20-48.pickle`\n  --no-header           不打印轮次详情标题。\n  --disable-param-export\n                        禁用超参数优化参数的自动导出。\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        按[日、周、月、年]显示回测细分数据。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值有：'syslog'、'journald'。详见文档获取更多详情。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，存在哪个使用哪个）。可使用多个--config选项。可设置为`-`从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，需额外使用trading-mode参数。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:42:39.103511"
  },
  "commands\\edge.md": {
    "hash": "a8fa97163f78b87ea185a6171b01a0e0",
    "content": "",
    "timestamp": "2025-07-31T05:42:40.072716"
  },
  "strategy_migration.md": {
    "hash": "6f57f93fe49c60d4866e6ab60a9d169f",
    "content": "修改后：\nclass AwesomeStrategy(IStrategy):\n    def confirm_trade_exit(self, pair: str, trade: Trade, order_type: str, amount: float,\n                           rate: float, time_in_force: str, sell_reason: str,\n                           current_time: datetime, **kwargs) -> bool:\n    return True\nfor t in self.freqai_info[\"feature_parameters\"][\"indicator_periods_candles\"]:\n\n            t = int(t)\n            informative[f\"%-{pair}rsi-period_{t}\"] = ta.RSI(informative, timeperiod=t)\n            informative[f\"%-{pair}mfi-period_{t}\"] = ta.MFI(informative, timeperiod=t)\n            informative[f\"%-{pair}adx-period_{t}\"] = ta.ADX(informative, timeperiod=t)\n            informative[f\"%-{pair}sma-period_{t}\"] = ta.SMA(informative, timeperiod=t)\n            informative[f\"%-{pair}ema-period_{t}\"] = ta.EMA(informative, timeperiod=t)\n\n            bollinger = qtpylib.bollinger_bands(\n                qtpylib.typical_price(informative), window=t, stds=2.2\n            )\n            informative[f\"{pair}bb_lowerband-period_{t}\"] = bollinger[\"lower\"]\n            informative[f\"{pair}bb_middleband-period_{t}\"] = bollinger[\"mid\"]\n            informative[f\"{pair}bb_upperband-period_{t}\"] = bollinger[\"upper\"]\n\n            informative[f\"%-{pair}bb_width-period_{t}\"] = (\n                informative[f\"{pair}bb_upperband-period_{t}\"]\n                - informative[f\"{pair}bb_lowerband-period_{t}\"]\n            ) / informative[f\"{pair}bb_middleband-period_{t}\"]\n            informative[f\"%-{pair}close-bb_lower-period_{t}\"] = (\n                informative[\"close\"] / informative[f\"{pair}bb_lowerband-period_{t}\"]\n            )\n\n            informative[f\"%-{pair}roc-period_{t}\"] = ta.ROC(informative, timeperiod=t)\n\n            informative[f\"%-{pair}relative_volume-period_{t}\"] = (\n                informative[\"volume\"] / informative[\"volume\"].rolling(t).mean()\n            ) # (1)\n\n        informative[f\"%-{pair}pct-change\"] = informative[\"close\"].pct_change()\n        informative[f\"%-{pair}raw_volume\"] = informative[\"volume\"]\n        informative[f\"%-{pair}raw_price\"] = informative[\"close\"]\n        # (2)\n\n        indicators = [col for col in informative if col.startswith(\"%\")]\n        # 此循环复制并平移所有指标，为数据添加时效性特征\n        for n in range(self.freqai_info[\"feature_parameters\"][\"include_shifted_candles\"] + 1):\n            if n == 0:\n                continue\n            informative_shift = informative[indicators].shift(n)\n            informative_shift = informative_shift.add_suffix(\"_shift-\" + str(n))\n            informative = pd.concat((informative, informative_shift), axis=1)\n\n        df = merge_informative_pair(df, informative, self.config[\"timeframe\"], tf, ffill=True)\n        skip_columns = [\n            (s + \"_\" + tf) for s in [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\"]\n        ]\n        df = df.drop(columns=skip_columns)\n\n        # 在此处添加通用指标（因为在实盘模式下，训练期间会调用此函数来生成指标）。注意确保不要重复添加\n        if set_generalized_indicators:\n            df[\"%-day_of_week\"] = (df[\"date\"].dt.dayofweek + 1) / 7\n            df[\"%-hour_of_day\"] = (df[\"date\"].dt.hour + 1) / 25\n            # (3)\n\n            # 用户在此处添加目标，需以&-为前缀（见下方约定）\n            df[\"&-s_close\"] = (\n                df[\"close\"]\n                .shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n                .rolling(self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n                .mean()\n                / df[\"close\"]\n                - 1\n            )  # (4)\n\n        return df\n# 删除这些行\n        # data_dictionary = dk.make_train_test_datasets(features_filtered, labels_filtered)\n        # self.data_cleaning_train(dk)\n        # data_dictionary = dk.normalize_data(data_dictionary)\n        # (1)\n\n        # 添加这些行。现在我们自己控制管道的fit/transform过程\n        dd = dk.make_train_test_datasets(features_filtered, labels_filtered)\n        dk.feature_pipeline = self.define_data_pipeline(threads=dk.thread_count)\n        dk.label_pipeline = self.define_label_pipeline(threads=dk.thread_count)\n\n        (dd[\"train_features\"],\n         dd[\"train_labels\"],\n         dd[\"train_weights\"]) = dk.feature_pipeline.fit_transform(dd[\"train_features\"],\n                                                                  dd[\"train_labels\"],\n                                                                  dd[\"train_weights\"])\n\n        (dd[\"test_features\"],\n         dd[\"test_labels\"],\n         dd[\"test_weights\"]) = dk.feature_pipeline.transform(dd[\"test_features\"],\n                                                             dd[\"test_labels\"],\n                                                             dd[\"test_weights\"])\n\n        dd[\"train_labels\"], _, _ = dk.label_pipeline.fit_transform(dd[\"train_labels\"])\n        dd[\"test_labels\"], _, _ = dk.label_pipeline.transform(dd[\"test_labels\"])\n\n        # ... 你的自定义代码\n\n        return model\n\n    def predict(\n        self, unfiltered_df: DataFrame, dk: FreqaiDataKitchen, **kwargs\n    ) -> tuple[DataFrame, npt.NDArray[np.int_]]:\n\n        # ... 你的自定义内容\n\n        # 删除这些行:\n        # self.data_cleaning_predict(dk)\n        # (2)\n\n        # 添加这些行:\n        dk.data_dictionary[\"prediction_features\"], outliers, _ = dk.feature_pipeline.transform(\n            dk.data_dictionary[\"prediction_features\"], outlier_check=True)\n\n        # 删除这行\n        # pred_df = dk.denormalize_labels_from_metadata(pred_df)\n        # (3)\n\n        # 替换为这些行\n        pred_df, _, _ = dk.label_pipeline.inverse_transform(pred_df)\n        if self.freqai_info.get(\"DI_threshold\", 0) > 0:\n            dk.DI_values = dk.feature_pipeline[\"di\"].di_values\n        else:\n            dk.DI_values = np.zeros(outliers.shape[0])\n        dk.do_predict = outliers\n\n        # ... 你的自定义代码\n        return (pred_df, dk.do_predict)",
    "timestamp": "2025-07-31T05:42:46.144932"
  },
  "commands\\hyperopt-list.md": {
    "hash": "44b738d00b7350a976b0dca38db2d979",
    "content": "",
    "timestamp": "2025-07-31T05:42:47.278455"
  },
  "commands\\download-data.md": {
    "hash": "634aa15376cc8c64603b5d7cb55182be",
    "content": "usage: freqtrade download-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH]\n                               [-p PAIRS [PAIRS ...]] [--pairs-file FILE]\n                               [--days INT] [--new-pairs-days INT]\n                               [--include-inactive-pairs]\n                               [--timerange TIMERANGE] [--dl-trades]\n                               [--convert] [--exchange EXCHANGE]\n                               [-t TIMEFRAMES [TIMEFRAMES ...]] [--erase]\n                               [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                               [--data-format-trades {json,jsongz,feather,parquet}]\n                               [--trading-mode {spot,margin,futures}]\n                               [--prepend]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --pairs-file FILE     包含交易对列表的文件。优先级高于--pairs选项或配置中设置的交易对。\n  --days INT            下载指定天数的数据。\n  --new-pairs-days INT  为新交易对下载指定天数的数据。默认值：`None`。\n  --include-inactive-pairs\n                        同时下载非活跃交易对的数据。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --dl-trades           下载交易数据而非OHLCV数据。\n  --convert             将下载的交易数据转换为OHLCV数据。仅在与`--dl-trades`结合使用时有效。对于没有历史OHLCV数据的交易所（例如Kraken），此转换将自动进行。如果未提供此选项，请使用`trades-to-ohlcv`命令将交易数据转换为OHLCV数据。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置文件时有效。\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        指定要下载的时间周期。空格分隔的列表。默认值：`1m 5m`。\n  --erase               清除所选交易所/交易对/时间周期的所有现有数据。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。（默认值：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的交易数据的存储格式。（默认值：`feather`）。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式\n  --prepend             允许数据前置。（数据追加已禁用）\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的颜色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值有：'syslog'、'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认值：`userdir/config.json` 或 `config.json`，取两者中存在的那个）。可以使用多个--config选项。可设置为`-`以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，请额外使用交易模式选项。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:42:49.129182"
  },
  "commands\\list-freqaimodels.md": {
    "hash": "3b2e6c783801314a4aa0819ff8a3113b",
    "content": "usage: freqtrade list-freqaimodels [-h] [-v] [--no-color] [--logfile FILE]\n                                   [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                   [--freqaimodel-path PATH] [-1]\n\n选项:\n  -h, --help            显示此帮助信息并退出\n  --freqaimodel-path PATH\n                        指定freqaimodels的额外查找路径。\n  -1, --one-column      单列打印输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值有：'syslog'、'journald'。详见文档获取更多信息。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，存在哪个使用哪个）。可使用多个--config选项。可设置为 `-` 从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，请额外使用trading-mode参数。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:42:59.736670"
  },
  "commands\\list-exchanges.md": {
    "hash": "74e7c8ba16cd26befc778bf33b4bc803",
    "content": "usage: freqtrade list-exchanges [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                [-c PATH] [-d PATH] [--userdir PATH] [-1] [-a]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -1, --one-column      单列打印输出。\n  -a, --all             打印ccxt库已知的所有交易所。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值包括：'syslog'、'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，存在哪个使用哪个）。可使用多个--config选项。可设置为 `-` 从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，请额外使用交易模式选项。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。",
    "timestamp": "2025-07-31T05:43:00.605210"
  },
  "commands\\list-hyperoptloss.md": {
    "hash": "dcfcd948965ab956ef5235a79ffcbd80",
    "content": "usage: freqtrade list-hyperoptloss [-h] [-v] [--no-color] [--logfile FILE]\n                                   [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                   [--hyperopt-path PATH] [-1]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --hyperopt-path PATH  指定超参数优化（Hyperopt）损失函数的额外查找路径。\n  -1, --one-column      单列打印输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值包括：'syslog'、'journald'。更多详情请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，存在哪个使用哪个）。可使用多个--config选项。可设置为 `-` 从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，请额外使用trading-mode参数。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:43:02.285321"
  },
  "commands\\list-data.md": {
    "hash": "79955f403caa86fe9f3b97efe7b991a1",
    "content": "usage: freqtrade list-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                           [-c PATH] [-d PATH] [--userdir PATH]\n                           [--exchange EXCHANGE]\n                           [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                           [--data-format-trades {json,jsongz,feather,parquet}]\n                           [--trades] [-p PAIRS [PAIRS ...]]\n                           [--trading-mode {spot,margin,futures}]\n                           [--show-timerange]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置文件时有效。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。（默认：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的交易数据的存储格式。（默认：`feather`）。\n  --trades              处理交易数据而非OHLCV数据。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式\n  --show-timerange      显示可用数据的时间范围。（计算可能需要一段时间）。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        将日志记录到指定文件。特殊值为：'syslog'、'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，存在哪个使用哪个）。可以使用多个 --config 选项。可设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，需额外使用交易模式参数。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:43:11.205432"
  },
  "commands\\hyperopt.md": {
    "hash": "44b711dea86bb66f3c138f494208e9d5",
    "content": "usage: freqtrade hyperopt [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                          [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                          [--strategy-path PATH] [--recursive-strategy-search]\n                          [--freqaimodel NAME] [--freqaimodel-path PATH]\n                          [-i TIMEFRAME] [--timerange TIMERANGE]\n                          [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                          [--max-open-trades INT]\n                          [--stake-amount STAKE_AMOUNT] [--fee FLOAT]\n                          [-p PAIRS [PAIRS ...]] [--hyperopt-path PATH]\n                          [--eps] [--enable-protections]\n                          [--dry-run-wallet DRY_RUN_WALLET]\n                          [--timeframe-detail TIMEFRAME_DETAIL] [-e INT]\n                          [--spaces {all,buy,sell,roi,stoploss,trailing,protection,trades,default} [{all,buy,sell,roi,stoploss,trailing,protection,trades,default} ...]]\n                          [--print-all] [--print-json] [-j JOBS]\n                          [--random-state INT] [--min-trades INT]\n                          [--hyperopt-loss NAME] [--disable-param-export]\n                          [--ignore-missing-spaces] [--analyze-per-epoch]\n                          [--early-stop INT]\n\noptions:\n  -h, --help            显示此帮助消息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。（默认：`feather`）。\n  --max-open-trades INT\n                        覆盖`max_open_trades`配置设置的值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖`stake_amount`配置设置的值。\n  --fee FLOAT           指定费率。将应用两次（在交易入场和出场时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --hyperopt-path PATH  为超参数优化损失函数指定额外的查找路径。\n  --eps, --enable-position-stacking\n                        允许多次购买同一交易对（仓位堆叠）。\n  --enable-protections, --enableprotections\n                        为回测启用保护机制。会显著减慢回测速度，但会包含已配置的保护机制\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        初始资金，用于回测/超参数优化和模拟交易。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        为回测指定详细时间框架（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  -e INT, --epochs INT  指定迭代次数（默认：100）。\n  --spaces {all,buy,sell,roi,stoploss,trailing,protection,trades,default} [{all,buy,sell,roi,stoploss,trailing,protection,trades,default} ...]\n                        指定要超参数优化的参数。用空格分隔的列表。\n  --print-all           打印所有结果，而不仅仅是最佳结果。\n  --print-json          以JSON格式打印输出。\n  -j JOBS, --job-workers JOBS\n                        超参数优化的并发运行作业数（超参数优化工作进程）。如果为-1（默认），则使用所有CPU；为-2，则使用除一个外的所有CPU，依此类推。如果为1，则完全不使用并行计算代码。\n  --random-state INT    将随机状态设置为某个正整数，以获得可重现的超参数优化结果。\n  --min-trades INT      为超参数优化路径中的评估设置最小期望交易数量（默认：1）。\n  --hyperopt-loss NAME, --hyperoptloss NAME\n                        指定超参数优化损失函数类（IHyperOptLoss）的类名。不同的函数会产生完全不同的结果，因为优化目标不同。内置的超参数优化损失函数包括：\n                        ShortTradeDurHyperOptLoss、OnlyProfitHyperOptLoss、\n                        SharpeHyperOptLoss、SharpeHyperOptLossDaily、\n                        SortinoHyperOptLoss、SortinoHyperOptLossDaily、\n                        CalmarHyperOptLoss、MaxDrawDownHyperOptLoss、\n                        MaxDrawDownRelativeHyperOptLoss、\n                        MaxDrawDownPerPairHyperOptLoss、\n                        ProfitDrawDownHyperOptLoss、MultiMetricHyperOptLoss\n  --disable-param-export\n                        禁用超参数优化参数的自动导出。\n  --ignore-missing-spaces, --ignore-unparameterized-spaces\n                        对任何请求的不含参数的超参数优化空间抑制错误。\n  --analyze-per-epoch   每个迭代周期运行一次populate_indicators。\n  --early-stop INT      如果在（默认：0）个迭代周期后没有改进，则提前停止超参数优化。\n\nCommon arguments:\n  -v, --verbose         详细模式（-vv 表示更多，-vvv 表示所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，这可能很有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值为：'syslog'、'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含历史回测数据的交易所基础目录路径。要查看期货数据，请额外使用交易模式。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\nStrategy arguments:\n  -s NAME, --strategy NAME\n                        指定机器人将使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的freqaimodel。\n  --freqaimodel-path PATH\n                        为freqaimodel指定额外的查找路径。",
    "timestamp": "2025-07-31T05:43:13.442386"
  },
  "commands\\list-markets.md": {
    "hash": "0d4b74311f648b2a4101d7621bd2b9fb",
    "content": "",
    "timestamp": "2025-07-31T05:43:13.821200"
  },
  "commands\\list-timeframes.md": {
    "hash": "3ae8de1ba4950c8c75a118c6deafe698",
    "content": "usage: freqtrade list-timeframes [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [--exchange EXCHANGE] [-1]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置文件时有效。\n  -1, --one-column      单列打印输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 表示更多，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的颜色显示。如果将输出重定向到文件，这可能很有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值有：'syslog'、'journald'。详见文档了解更多信息。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，取先存在的那个）。可使用多个 --config 选项。可设置为 `-` 从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。若要查看期货数据，需额外使用交易模式参数。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:43:15.740292"
  },
  "commands\\list-pairs.md": {
    "hash": "3844e9b529d25e2b173f64598aa02870",
    "content": "",
    "timestamp": "2025-07-31T05:43:16.176434"
  },
  "commands\\list-strategies.md": {
    "hash": "ef2a5c1dafbd05c6c68ca33bee94d54b",
    "content": "usage: freqtrade list-strategies [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [--strategy-path PATH] [-1]\n                                 [--recursive-strategy-search]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --strategy-path PATH  指定额外的策略查找路径。\n  -1, --one-column      单列打印输出。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值包括：'syslog'、'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认值：`userdir/config.json` 或 `config.json`，存在哪个使用哪个）。可以使用多个 --config 选项。可设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，请额外使用 trading-mode 参数。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:43:19.688504"
  },
  "commands\\new-config.md": {
    "hash": "1511f3b28cb8817d0f205089408f57a3",
    "content": "用法: freqtrade new-config [-h] [-c PATH]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认值：`userdir/config.json` 或 `config.json`，取存在的那个）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。",
    "timestamp": "2025-07-31T05:43:22.886962"
  },
  "commands\\new-strategy.md": {
    "hash": "815439c746acb91b815bfd882581f55e",
    "content": "usage: freqtrade new-strategy [-h] [--userdir PATH] [-s NAME]\n                              [--strategy-path PATH]\n                              [--template {full,minimal,advanced}]\n\noptions:\n  -h, --help            显示此帮助消息并退出\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -s NAME, --strategy NAME\n                        指定机器人将使用的策略类名称。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --template {full,minimal,advanced}\n                        使用模板，可选 `minimal`（最小化）、`full`（包含多个示例指标）或 `advanced`（高级）。默认值：`full`。",
    "timestamp": "2025-07-31T05:43:25.978254"
  },
  "commands\\backtesting.md": {
    "hash": "9af1e96a3c6ced5ffa47c0aeb367f2b8",
    "content": "usage: freqtrade backtesting [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                             [--strategy-path PATH]\n                             [--recursive-strategy-search]\n                             [--freqaimodel NAME] [--freqaimodel-path PATH]\n                             [-i TIMEFRAME] [--timerange TIMERANGE]\n                             [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                             [--max-open-trades INT]\n                             [--stake-amount STAKE_AMOUNT] [--fee FLOAT]\n                             [-p PAIRS [PAIRS ...]] [--eps]\n                             [--enable-protections]\n                             [--dry-run-wallet DRY_RUN_WALLET]\n                             [--timeframe-detail TIMEFRAME_DETAIL]\n                             [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                             [--export {none,trades,signals}]\n                             [--export-filename PATH]\n                             [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n                             [--cache {none,day,week,month}]\n                             [--freqai-backtest-live-models] [--notes TEXT]\n\n选项:\n  -h, --help            显示此帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --timerange TIMERANGE\n                        指定要使用的时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。（默认：`feather`）。\n  --max-open-trades INT\n                        覆盖`max_open_trades`配置设置的值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖`stake_amount`配置设置的值。\n  --fee FLOAT           指定手续费比例。将被应用两次（在交易入场和出场时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --eps, --enable-position-stacking\n                        允许多次购买同一交易对（仓位堆叠）。\n  --enable-protections, --enableprotections\n                        为回测启用保护机制。会显著减慢回测速度，但会包含已配置的保护措施。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        起始资金，用于回测/超参数优化和模拟交易。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        为回测指定详细时间框架（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供以空格分隔的策略列表进行回测。请注意，时间框架需要在配置文件中设置\n                        或通过命令行设置。当与`--export trades`一起使用时，策略名称会被注入\n                        文件名中（因此`backtest-data.json`变为`backtest-data-SampleStrategy.json`）。\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --export-filename PATH, --backtest-filename PATH\n                        使用此文件名保存回测结果。需要同时设置`--export`。\n                        示例: `--export-filename=user_data/backtest_results/backtest_today.json`\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        按[日、周、月、年]显示回测细目。\n  --cache {none,day,week,month}\n                        加载不超过指定时间的缓存回测结果（默认：day）。\n  --freqai-backtest-live-models\n                        使用实时模型运行回测。\n  --notes TEXT          为回测结果添加备注。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 更多，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的颜色显示。如果将输出重定向到文件可能有用。\n  --logfile FILE, --log-file FILE\n                        日志输出到指定文件。特殊值：'syslog'，'journald'。\n                        更多详情请参见文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在者为准）。\n                        可以使用多个--config选项。可以设置为`-`从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含历史回测数据的交易所基础目录路径。要查看期货数据，\n                        需额外使用交易模式（trading-mode）。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人将要使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的FreqAI模型。\n  --freqaimodel-path PATH\n                        为FreqAI模型指定额外的查找路径。",
    "timestamp": "2025-07-31T05:43:30.420416"
  },
  "commands\\show-config.md": {
    "hash": "da2d16fca02ecdcf17defb401da82266",
    "content": "用法: freqtrade show-config [-h] [--userdir PATH] [-c PATH]\n                             [--show-sensitive]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -c PATH, --config PATH\n                        指定配置文件（默认值：`userdir/config.json` 或 `config.json`（以存在的为准））。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  --show-sensitive      在输出中显示敏感信息。",
    "timestamp": "2025-07-31T05:43:37.106743"
  },
  "commands\\main.md": {
    "hash": "440b5858e32b589888d153c1bdeb8ba3",
    "content": "",
    "timestamp": "2025-07-31T05:43:44.219309"
  },
  "commands\\plot-profit.md": {
    "hash": "d4b143134c813d44e17b83ed946675c1",
    "content": "usage: freqtrade plot-profit [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                             [--strategy-path PATH]\n                             [--recursive-strategy-search]\n                             [--freqaimodel NAME] [--freqaimodel-path PATH]\n                             [-p PAIRS [PAIRS ...]] [--timerange TIMERANGE]\n                             [--export {none,trades,signals}]\n                             [--export-filename PATH] [--db-url PATH]\n                             [--trade-source {DB,file}] [-i TIMEFRAME]\n                             [--auto-open]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --export-filename PATH, --backtest-filename PATH\n                        使用此文件名保存回测结果。需要同时设置`--export`。示例：`--export-filename=user_data/backtest_results/backtest_today.json`\n  --db-url PATH         覆盖交易数据库URL，这在自定义部署中很有用（默认：实盘模式为`sqlite:///tradesv3.sqlite`，模拟盘模式为`sqlite:///tradesv3.dryrun.sqlite`）。\n  --trade-source {DB,file}\n                        指定交易数据的来源（可以是DB或文件（回测文件））默认：file\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --auto-open           自动打开生成的图表。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，这可能很有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值包括：'syslog'、'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json`或`config.json`，以存在者为准）。可以使用多个--config选项。可设置为`-`以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，需额外使用交易模式。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人将使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的freqaimodels。\n  --freqaimodel-path PATH\n                        为freqaimodels指定额外的查找路径。",
    "timestamp": "2025-07-31T05:43:44.299220"
  },
  "commands\\recursive-analysis.md": {
    "hash": "6ea68fd69d34d55a6f07ba9757f5f332",
    "content": "usage: freqtrade recursive-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-s NAME] [--strategy-path PATH]\n                                    [--recursive-strategy-search]\n                                    [--freqaimodel NAME]\n                                    [--freqaimodel-path PATH] [-i TIMEFRAME]\n                                    [--timerange TIMERANGE]\n                                    [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                    [-p PAIRS [PAIRS ...]]\n                                    [--startup-candle STARTUP_CANDLE [STARTUP_CANDLE ...]]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。（默认：`feather`）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --startup-candle STARTUP_CANDLE [STARTUP_CANDLE ...]\n                        指定要检查的启动K线数量（`199`、`499`、`999`、`1999`）。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值包括：'syslog'、'journald'。详见文档了解更多详情。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，存在哪个使用哪个）。可使用多个--config选项。设置为`-`可从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，需额外使用trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人将使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的freqaimodels。\n  --freqaimodel-path PATH\n                        为freqaimodels指定额外的查找路径。",
    "timestamp": "2025-07-31T05:43:48.778935"
  },
  "commands\\lookahead-analysis.md": {
    "hash": "8675836f9ad28d71eb2139d36b70a823",
    "content": "usage: freqtrade lookahead-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-s NAME] [--strategy-path PATH]\n                                    [--recursive-strategy-search]\n                                    [--freqaimodel NAME]\n                                    [--freqaimodel-path PATH] [-i TIMEFRAME]\n                                    [--timerange TIMERANGE]\n                                    [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                    [--max-open-trades INT]\n                                    [--stake-amount STAKE_AMOUNT]\n                                    [--fee FLOAT] [-p PAIRS [PAIRS ...]]\n                                    [--enable-protections]\n                                    [--dry-run-wallet DRY_RUN_WALLET]\n                                    [--timeframe-detail TIMEFRAME_DETAIL]\n                                    [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                                    [--export {none,trades,signals}]\n                                    [--export-filename PATH]\n                                    [--freqai-backtest-live-models]\n                                    [--minimum-trade-amount INT]\n                                    [--targeted-trade-amount INT]\n                                    [--lookahead-analysis-exportfilename LOOKAHEAD_ANALYSIS_EXPORTFILENAME]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。（默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的`max_open_trades`值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的`stake_amount`值。\n  --fee FLOAT           指定费率。将应用两次（在交易入场和出场时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --enable-protections, --enableprotections\n                        为回测启用保护机制。会显著减慢回测速度，但会包含已配置的保护机制\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        初始余额，用于回测/超参数优化和模拟交易。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        指定回测的详细时间周期（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供以空格分隔的策略列表进行回测。请注意，时间周期需要在配置文件中或通过命令行设置。当与`--export trades`一起使用时，策略名称会被注入到文件名中（例如`backtest-data.json`会变为`backtest-data-SampleStrategy.json`）\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --export-filename PATH, --backtest-filename PATH\n                        使用此文件名保存回测结果。需要同时设置`--export`。示例：`--export-filename=user_data/backtest_results/backtest_today.json`\n  --freqai-backtest-live-models\n                        使用已准备好的模型运行回测。\n  --minimum-trade-amount INT\n                        前瞻分析的最小交易数量\n  --targeted-trade-amount INT\n                        前瞻分析的目标交易数量\n  --lookahead-analysis-exportfilename LOOKAHEAD_ANALYSIS_EXPORTFILENAME\n                        使用此CSV文件名存储前瞻分析结果\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，这可能很有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值有：'syslog'、'journald'。详见文档了解更多详情。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在者为准）。可使用多个--config选项。可设置为`-`从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，需额外使用交易模式。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人将使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的freqaimodel。\n  --freqaimodel-path PATH\n                        指定freqaimodel的额外查找路径。",
    "timestamp": "2025-07-31T05:43:49.362348"
  },
  "commands\\show-trades.md": {
    "hash": "15f4f359474496a436eb1da505fca7b1",
    "content": "",
    "timestamp": "2025-07-31T05:43:49.625661"
  },
  "commands\\strategy-updater.md": {
    "hash": "352ca38da87bf7e30cd8c3540aacfa07",
    "content": "usage: freqtrade strategy-updater [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                  [-c PATH] [-d PATH] [--userdir PATH]\n                                  [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                                  [--strategy-path PATH]\n                                  [--recursive-strategy-search]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供以空格分隔的策略列表用于回测。请注意，时间框架需要在配置文件中或通过命令行设置。当与`--export trades`一起使用时，策略名称会被注入到文件名中（例如`backtest-data.json`会变为`backtest-data-SampleStrategy.json`\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值包括：'syslog'、'journald'。详见文档获取更多详细信息。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认值：`userdir/config.json` 或 `config.json`，取先存在的那个）。可使用多个--config选项。设置为`-`可从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。若要查看期货数据，需额外使用交易模式。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。",
    "timestamp": "2025-07-31T05:43:52.088015"
  },
  "commands\\plot-dataframe.md": {
    "hash": "3a0420a0c0c9f037443563b86a57f031",
    "content": "usage: freqtrade plot-dataframe [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                                [--strategy-path PATH]\n                                [--recursive-strategy-search]\n                                [--freqaimodel NAME] [--freqaimodel-path PATH]\n                                [-p PAIRS [PAIRS ...]]\n                                [--indicators1 INDICATORS1 [INDICATORS1 ...]]\n                                [--indicators2 INDICATORS2 [INDICATORS2 ...]]\n                                [--plot-limit INT] [--db-url PATH]\n                                [--trade-source {DB,file}]\n                                [--export {none,trades,signals}]\n                                [--export-filename PATH]\n                                [--timerange TIMERANGE] [-i TIMEFRAME]\n                                [--no-trades]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  --indicators1 INDICATORS1 [INDICATORS1 ...]\n                        设置策略中要显示在图表第一行的指标。空格分隔的列表。示例：\n                        `ema3 ema5`。默认值：`['sma', 'ema3', 'ema5']`。\n  --indicators2 INDICATORS2 [INDICATORS2 ...]\n                        设置策略中要显示在图表第三行的指标。空格分隔的列表。示例：\n                        `fastd fastk`。默认值：`['macd', 'macdsignal']`。\n  --plot-limit INT      指定绘图的K线限制。注意：过高的值会导致文件过大。默认值：750。\n  --db-url PATH         覆盖交易数据库URL，这在自定义部署中很有用（默认值：实盘模式为\n                        `sqlite:///tradesv3.sqlite`，回测模式为\n                        `sqlite:///tradesv3.dryrun.sqlite`）。\n  --trade-source {DB,file}\n                        指定交易数据的来源（可以是DB或文件（回测文件））默认值：file\n  --export {none,trades,signals}\n                        导出回测结果（默认值：trades）。\n  --export-filename PATH, --backtest-filename PATH\n                        使用此文件名保存回测结果。需要同时设置`--export`。示例：\n                        `--export-filename=user_data/backtest_results/backtest_today.json`\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --no-trades           跳过使用回测文件和数据库中的交易数据。\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，这可能很有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值：'syslog'、'journald'。详见文档获取更多信息。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认值：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可使用多个--config选项。可设置为`-`以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，需额外使用trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人将使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的freqaimodels。\n  --freqaimodel-path PATH\n                        指定freqaimodels的额外查找路径。",
    "timestamp": "2025-07-31T05:43:56.556915"
  },
  "commands\\test-pairlist.md": {
    "hash": "aa08f36a788feb62a91611c616df0160",
    "content": "usage: freqtrade test-pairlist [-h] [--userdir PATH] [-v] [-c PATH]\n                               [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]]\n                               [-1] [--print-json] [--exchange EXCHANGE]\n\noptions:\n  -h, --help            显示此帮助消息并退出\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  -c PATH, --config PATH\n                        指定配置文件（默认：\n                        `userdir/config.json` 或 `config.json`，存在哪个使用哪个）。可使用多个 --config 选项。可设置为 `-` 从标准输入读取配置。\n  --quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]\n                        指定报价货币（可多个）。以空格分隔的列表。\n  -1, --one-column      单列打印输出。\n  --print-json          以JSON格式打印交易对或市场符号列表。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。",
    "timestamp": "2025-07-31T05:44:03.294674"
  },
  "commands\\trades-to-ohlcv.md": {
    "hash": "b715705ee974cc617de4a84fa446fcb4",
    "content": "usage: freqtrade trades-to-ohlcv [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [-p PAIRS [PAIRS ...]]\n                                 [-t TIMEFRAMES [TIMEFRAMES ...]]\n                                 [--exchange EXCHANGE]\n                                 [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                 [--data-format-trades {json,jsongz,feather,parquet}]\n                                 [--trading-mode {spot,margin,futures}]\n\n选项:\n  -h, --help            显示此帮助消息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制为这些交易对。交易对之间用空格分隔。\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        指定要下载的时间框架。空格分隔的列表。默认值：`1m 5m`。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置文件时有效。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。（默认值：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的交易数据的存储格式。（默认值：`feather`）。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式\n\n通用参数:\n  -v, --verbose         详细模式（-vv获取更多信息，-vvv获取所有消息）。\n  --no-color            禁用超参数优化结果的彩色显示。如果将输出重定向到文件，此选项可能有用。\n  --logfile FILE, --log-file FILE\n                        记录日志到指定文件。特殊值为：'syslog'、'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认值：`userdir/config.json` 或 `config.json`，以存在者为准）。可以使用多个--config选项。可设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含交易所历史回测数据的基础目录路径。要查看期货数据，请额外使用交易模式选项。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。",
    "timestamp": "2025-07-31T05:44:10.081643"
  },
  "commands\\trade.md": {
    "hash": "71c8ec7fd6aa21d38631586349c319ed",
    "content": "",
    "timestamp": "2025-07-31T05:44:11.362048"
  },
  "includes\\release_template.md": {
    "hash": "6d1537f9b30f0397cbbdcdbb89a13950",
    "content": "## 重点变更\n\n- ...\n\n### 如何更新\n\n一如既往，你可以使用以下命令之一更新你的机器人：\n\n#### docker-compose",
    "timestamp": "2025-07-31T05:44:13.956566"
  },
  "includes\\cors.md": {
    "hash": "d767c475afe3bd81166baa510a35c06c",
    "content": "## CORS\n\n整个部分仅在跨域情况下需要（例如，当您有多个机器人API运行在 `localhost:8081`、`localhost:8082` 等地址，并希望将它们整合到一个FreqUI实例中时）。\n\n??? info \"技术解释\"\n    所有基于Web的前端都受[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)（跨域资源共享）的限制。\n    由于大多数对Freqtrade API的请求都需要身份验证，因此正确的CORS策略是避免安全问题的关键。\n    此外，标准禁止对带凭证的请求使用 `*` 通配符CORS策略，因此必须适当设置此配置。\n\n用户可以通过 `CORS_origins` 配置项允许来自不同源URL访问机器人API。\n它包含一个允许访问机器人API资源的URL列表。\n\n假设您的应用部署在 `https://frequi.freqtrade.io/home/`，这意味着需要进行以下配置：",
    "timestamp": "2025-07-31T05:44:14.915419"
  },
  "commands\\webserver.md": {
    "hash": "1f27a661ec78eb2e6c473d890a5cd94a",
    "content": "",
    "timestamp": "2025-07-31T05:44:22.881617"
  },
  "includes\\strategy-imports.md": {
    "hash": "a0bc826cd30ac8b5c4df82f1d9bfc98d",
    "content": "## 策略所需的导入项\n\n创建策略时，您需要导入必要的模块和类。以下是策略所需的导入项：\n\n默认情况下，我们建议将以下导入作为您策略的基础：这将涵盖freqtrade功能正常工作所需的所有导入。显然，您可以根据策略需要添加更多导入。",
    "timestamp": "2025-07-31T05:44:25.865644"
  },
  "includes\\showcase.md": {
    "hash": "00bd811600dddd430c5de657d00b75ce",
    "content": "本节将重点介绍社区成员的一些项目。\n!!! Note\n    以下项目大多不由freqtrade团队维护，因此使用前请自行谨慎判断。\n\n- [示例freqtrade策略](https://github.com/freqtrade/freqtrade-strategies/)\n- [FrequentHippo - 模拟/实盘运行和回测统计](http://frequenthippo.ddns.net) (作者：hippocritical)。\n- [在线交易对列表生成器](https://remotepairlist.com/) (作者：Blood4rc)。\n- [Freqtrade回测项目](https://strat.ninja/) (作者：Blood4rc)。\n- [Freqtrade分析笔记本](https://github.com/froggleston/freqtrade_analysis_notebook) (作者：Froggleston)。\n- [freqtrade的TUI界面](https://github.com/froggleston/freqtrade-frogtrade9000) (作者：Froggleston)。\n- [Bot Academy](https://botacademy.ddns.net/) (作者：stash86) - 关于加密货币机器人项目的博客。",
    "timestamp": "2025-07-31T05:44:28.372943"
  },
  "includes\\strategy-exit-comparisons.md": {
    "hash": "628cac7de2a5be81f976bfca4d54b7c0",
    "content": "## 出场逻辑对比\n\nFreqtrade允许您的策略使用基于信号或基于回调的函数实现不同的出场逻辑。本节旨在对比各种不同的函数，帮助您选择最适合您需求的函数。\n\n* **`populate_exit_trend()`** - 基于向量信号的出场逻辑，在主数据框中使用指标\n  ✅ **适用场景**：基于指标或其他可通过向量方式计算的数据定义出场信号。\n  🚫 **不适用场景**：为每个单独的交易自定义出场条件，或需要交易数据来做出出场决策时。\n* **`custom_exit()`** - 自定义出场逻辑，将立即完全平仓，在机器人每次循环迭代时为每个未平仓交易调用，直到交易关闭。\n  ✅ **适用场景**：为每个单独的交易指定出场条件（包括使用`adjust_trade_position()`调整的任何额外订单），或需要交易数据来做出出场决策时，例如使用利润数据来出场。\n  🚫 **不适用场景**：当您希望使用基于向量指标的数据出场时（应改用`populate_exit_trend()`信号），或作为`custom_stoploss()`的替代，同时注意回测中基于费率的出场可能不准确。\n* **`custom_stoploss()`** - 自定义追踪止损，在每次迭代时为每个未平仓交易调用，直到交易关闭。此处返回的值也用于[交易所止损](stoploss.md#stop-loss-on-exchangefreqtrade)。  \n  ✅ **适用场景**：自定义止损逻辑，基于交易数据或其他条件设置动态止损。\n  🚫 **不适用场景**：基于特定条件立即平仓。此时应使用`custom_exit()`。\n* **`custom_roi()`** - 自定义ROI（投资回报率），在每次迭代时为每个未平仓交易调用，直到交易关闭。\n  ✅ **适用场景**：基于利润或其他条件，指定一个最低ROI阈值（“止盈”），以便在交易持续期间的某个时刻以该ROI水平平仓。\n  🚫 **不适用场景**：基于特定条件立即平仓。应使用`custom_exit()`。\n  🚫 **不适用场景**：静态ROI。应使用`minimal_roi`。",
    "timestamp": "2025-07-31T05:44:36.017140"
  },
  "includes\\pricing.md": {
    "hash": "252d5abbfbd1b9c95bc24365e68acdee",
    "content": "## 订单使用的价格\n\n常规订单的价格可以通过参数结构控制：`entry_pricing` 用于交易入场，`exit_pricing` 用于交易出场。\n价格总是在下单前获取，通过查询交易所行情（tickers）或使用订单簿（orderbook）数据。\n\n!!! Note\n    Freqtrade使用的订单簿数据是通过ccxt的`fetch_order_book()`函数从交易所获取的，通常是L2聚合订单簿数据，而行情数据是ccxt的`fetch_ticker()`/`fetch_tickers()`函数返回的结构。更多详情请参考ccxt库的[文档](https://github.com/ccxt/ccxt/wiki/Manual#market-data)。\n\n!!! Warning \"使用市价单\"\n    使用市价单时，请阅读[市价单定价](#market-order-pricing)部分。\n\n### 入场价格\n\n#### 入场价格方向\n\n配置项 `entry_pricing.price_side` 定义机器人买入时查看订单簿的方向。\n\n以下是订单簿的示例：",
    "timestamp": "2025-07-31T05:45:08.669102"
  },
  "strategy-callbacks.md": {
    "hash": "52864d0498c463e4b142aef26f6bcaad",
    "content": "在超参数优化期间，此函数仅在启动时运行一次。\n\n## 机器人循环开始\n\n一个简单的回调函数，在实盘/模拟交易模式下的每次机器人节流迭代开始时调用一次（大约每5秒，除非配置不同），或在回测/超参数优化模式下每个K线调用一次。\n可用于执行与交易对无关的计算（适用于所有交易对）、加载外部数据等。\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* 方法\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool, \n                        **kwargs) -> float | None:\n\n        # 确保最长的时间间隔条件放在最前面 - 这些条件是从上到下依次评估的。\n        if current_time - timedelta(minutes=120) > trade.open_date_utc:\n            return -0.05 * trade.leverage\n        elif current_time - timedelta(minutes=60) > trade.open_date_utc:\n            return -0.10 * trade.leverage\n        return None\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* 方法\n\n    # 将未成交超时设置为25小时，因为下方的最大超时为24小时。\n    unfilledtimeout = {\n        \"entry\": 60 * 25,\n        \"exit\": 60 * 25\n    }\n\n    def check_entry_timeout(self, pair: str, trade: Trade, order: Order,\n                            current_time: datetime, **kwargs) -> bool:\n        ob = self.dp.orderbook(pair, 1)\n        current_price = ob[\"bids\"][0][0]\n        # 如果当前价格比订单价格高2%以上，则取消买入订单。\n        if current_price > order.price * 1.02:\n            return True\n        return False\n\n\n    def check_exit_timeout(self, pair: str, trade: Trade, order: Order,\n                           current_time: datetime, **kwargs) -> bool:\n        ob = self.dp.orderbook(pair, 1)\n        current_price = ob[\"asks\"][0][0]\n        # 如果当前价格比订单价格低2%以上，则取消卖出订单。\n        if current_price < order.price * 0.98:\n            return True\n        return False\n\n\n---\n\n## 机器人订单确认\n\n确认交易入场/出场。\n这是下单前最后调用的方法。\n\n### 交易入场（买入订单）确认\n\n`confirm_trade_entry()` 可用于在最后一刻中止交易入场（可能因为价格不符合预期）。\n:param current_profit: 当前利润（比率），基于current_rate计算（与current_entry_profit相同）。\n        :param min_stake: 交易所允许的最小持仓金额（适用于入场和出场）\n        :param max_stake: 允许的最大持仓金额（受余额或交易所限制）。\n        :param current_entry_rate: 使用入场定价的当前价格。\n        :param current_exit_rate: 使用出场定价的当前价格。\n        :param current_entry_profit: 使用入场定价计算的当前利润。\n        :param current_exit_profit: 使用出场定价计算的当前利润。\n        :param **kwargs: 确保保留此项，以便后续更新不会破坏策略。\n        :return float: 调整交易的持仓金额，\n                       正值表示增加头寸，负值表示减少头寸。\n                       返回None表示不执行操作。\n                       可选地，返回一个元组，第二个元素为订单原因\n        \"\"\"\n        if trade.has_open_orders:\n            # 仅在没有未成交订单时操作\n            return\n\n        if current_profit > 0.05 and trade.nr_of_successful_exits == 0:\n            # 在盈利+5%时获利了结一半\n            return -(trade.stake_amount / 2), \"half_profit_5%\"\n\n        if current_profit > -0.05:\n            return None\n\n        # 获取交易对的 dataframe（仅展示如何访问）\n        dataframe, _ = self.dp.get_analyzed_dataframe(trade.pair, self.timeframe)\n        # 仅在价格未持续下跌时买入。\n        last_candle = dataframe.iloc[-1].squeeze()\n        previous_candle = dataframe.iloc[-2].squeeze()\n        if last_candle[\"close\"] < previous_candle[\"close\"]:\n            return None\n\n        filled_entries = trade.select_filled_orders(trade.entry_side)\n        count_of_entries = trade.nr_of_successful_entries\n        # 允许最多3次额外的、逐步增大的买入（总共4次）\n        # 初始买入为1倍\n        # 如果跌至-5%利润，买入1.25倍更多，平均利润应大致增加到-2.2%\n        # 如果再次跌至-5%，买入1.5倍更多\n        # 如果再次跌至-5%，买入1.75倍更多\n        # 此交易的总持仓金额为初始允许持仓的1 + 1.25 + 1.5 + 1.75 = 5.5倍\n        # 这就是为什么max_dca_multiplier设为5.5\n        # 希望你有足够深的钱包！\n        try:\n            # 返回首次订单的持仓金额\n            stake_amount = filled_entries[0].stake_amount_filled\n            # 计算当前加仓订单的金额\n            stake_amount = stake_amount * (1 + (count_of_entries * 0.25))\n            return stake_amount, \"1/3rd_increase\"\n        except Exception as exception:\n            return None\n\n        return None\n策略随后可以返回一个 `AnnotationType` 对象列表，以便在图表上显示。根据返回的内容，图表可以显示水平区域、垂直区域或方框。\n\n完整的对象结构如下：",
    "timestamp": "2025-07-31T05:45:13.856852"
  },
  "strategy-customization.md": {
    "hash": "2a46a8cc743f0119ac9b064f7a311a30",
    "content": "freqtrade new-strategy --strategy AwesomeStrategy\n通过让机器人知道需要多少历史数据，回测交易可以在回测和超参数优化期间从指定的时间范围开始。\n\n!!! Warning \"使用多次调用获取OHLCV数据\"\n    如果您收到类似 `WARNING - Using 3 calls to get OHLCV. This can result in slower operations for the bot. Please check if you really need 1500 candles for your strategy` 的警告，您应该考虑是否真的需要这么多历史数据来生成信号。\n    这会导致Freqtrade对同一交易对进行多次调用，显然比单次网络请求要慢。\n    因此，Freqtrade刷新K线数据的时间会更长，应尽可能避免这种情况。\n    为避免给交易所造成过载或使Freqtrade过慢，调用次数上限为5次。\n\n!!! Warning\n    `startup_candle_count` 应小于 `ohlcv_candle_limit * 5`（大多数交易所为500 * 5 = 2500），因为在模拟交易/实盘交易期间，只有这么多K线数据可用。\n\n#### 示例\n\n让我们尝试使用上述带有EMA100的示例策略，回测1个月（2019年1月）的5分钟K线数据。\n目前，其中包含`pair`，可通过`metadata['pair']`访问，返回格式为`XRP/BTC`的交易对（对于期货市场则为`XRP/BTC:BTC`）。\n\nmetadata字典不应被修改，且不会在策略中的多个函数间持久化信息。\n\n相反，请查看[存储信息](strategy-advanced.md#storing-information-persistent)部分。\n\n--8<-- \"includes/strategy-imports.md\"\n\n## 策略文件加载\n\n默认情况下，freqtrade会尝试从`userdir`（默认`user_data/strategies`）中的所有`.py`文件加载策略。\n\n假设您的策略名为`AwesomeStrategy`，存储在文件`user_data/strategies/AwesomeStrategy.py`中，则可以通过以下命令以模拟（或实盘，取决于您的配置）模式启动freqtrade：\n# 所有信息样本上的指标必须在此之前计算完成\n    dataframe = pd.merge(dataframe, informative, left_on='date', right_on=f'date_merge_{inf_tf}', how='left')\n    # 使用FFill使1天的数据值在全天的每一行中都可用\n    # 如果没有此步骤，比较每天只能进行一次\n    dataframe = dataframe.ffill()\nfree_eth = self.wallets.get_free('ETH')  # 可用ETH余额\n    used_eth = self.wallets.get_used('ETH')  # 已用ETH余额（挂单中）\n    total_eth = self.wallets.get_total('ETH')  # 总ETH余额\n\n\n### 钱包的可用方法\n\n- `get_free(asset)` - 当前可用于交易的可用余额\n- `get_used(asset)` - 当前被占用的余额（挂单中）\n- `get_total(asset)` - 总可用余额 - 上述两项之和\n\n***\n\n## 额外数据（交易记录）\n\n策略中可以通过查询数据库获取交易历史记录。\n\n在文件顶部，导入所需对象：",
    "timestamp": "2025-07-31T05:45:22.870249"
  },
  "includes\\protections.md": {
    "hash": "1962a4f4e9ba11505e14fcc1bcd03722",
    "content": "## 保护机制\n\n保护机制通过暂时停止单个交易对或所有交易对的交易，保护您的策略免受意外事件和市场条件的影响。\n所有保护的结束时间都会向上取整到下一根K线，以避免在K线内突然、意外的买入。\n\n!!! Tip \"使用提示\"\n    并非所有保护机制都适用于所有策略，需要根据您的策略调整参数以提高性能。  \n\n    每个保护机制可以使用不同的参数配置多次，以实现不同级别的保护（短期/长期）。\n\n!!! Note \"回测\"\n    回测和超参数优化支持保护机制，但必须使用 `--enable-protections` 标志显式启用。\n\n### 可用的保护机制\n\n* [`StoplossGuard`](#stoploss-guard) 如果在特定时间窗口内发生一定数量的止损，则停止交易。\n* [`MaxDrawdown`](#maxdrawdown) 当达到最大回撤时停止交易。\n* [`LowProfitPairs`](#low-profit-pairs) 锁定低利润交易对\n* [`CooldownPeriod`](#cooldown-period) 卖出后不立即重新进入该交易对。\n\n### 所有保护机制的通用设置\n\n| 参数 | 描述 |\n|------------|-------------|\n| `method` | 要使用的保护机制名称。 <br> **数据类型：** 字符串，从[可用的保护机制](#available-protections)中选择\n| `stop_duration_candles` | 锁定将持续多少根K线？ <br> **数据类型：** 正整数（以K线为单位）\n| `stop_duration` | 保护机制应锁定多少分钟。 <br>不能与 `stop_duration_candles` 同时使用。 <br> **数据类型：** 浮点数（以分钟为单位）\n| `lookback_period_candles` | 仅考虑在过去 `lookback_period_candles` 根K线内完成的交易。某些保护机制可能会忽略此设置。 <br> **数据类型：** 正整数（以K线为单位）。\n| `lookback_period` | 仅考虑在 `current_time - lookback_period` 之后完成的交易。 <br>不能与 `lookback_period_candles` 同时使用。 <br>某些保护机制可能会忽略此设置。 <br> **数据类型：** 浮点数（以分钟为单位）\n| `trade_limit` | 所需的最小交易数量（并非所有保护机制都使用）。 <br> **数据类型：** 正整数\n| `unlock_at` | 定期解锁交易的时间（并非所有保护机制都使用）。 <br> **数据类型：** 字符串 <br>**输入格式：** \"HH:MM\"（24小时制）\n\n!!! Note \"持续时间\"\n    持续时间（`stop_duration*` 和 `lookback_period*`）可以以分钟或K线为单位定义。为了在测试不同时间框架时更灵活，以下所有示例将使用“K线”定义。\n\n#### 止损防护（Stoploss Guard）\n\n`StoplossGuard` 选择在 `lookback_period` 分钟内（或使用 `lookback_period_candles` 时以K线为单位）的所有交易。如果有 `trade_limit` 或更多交易触发了止损，则交易将停止 `stop_duration` 分钟（或使用 `stop_duration_candles` 时以K线为单位，或使用 `unlock_at` 时直到设定时间）。\n\n这适用于所有交易对，除非 `only_per_pair` 设置为 true，此时将一次只查看一个交易对。\n\n同样，此保护机制默认会查看所有交易（多单和空单）。对于期货机器人，设置 `only_per_side` 将使机器人只考虑一侧（多或空），然后仅锁定该侧，例如在一系列多单止损后允许空单继续。\n\n`required_profit` 将确定要考虑的止损所需的相对利润（或亏损）。通常不应设置此参数，默认值为 0.0，这意味着所有亏损的止损都将触发阻止。\n\n以下示例中，如果机器人在过去24根K线内触发了4次止损，则在最后一笔交易后，所有交易对将停止交易4根K线。",
    "timestamp": "2025-07-31T05:45:35.691829"
  },
  "includes\\pairlists.md": {
    "hash": "f8144c4bc546c6841044ca0cd7215627",
    "content": "## 交易对列表和交易对列表处理器\n\n交易对列表处理器（Pairlist Handlers）定义了机器人应该交易的交易对列表（pairlist）。它们在配置设置的`pairlists`部分进行配置。\n\n在配置中，您可以使用静态交易对列表（由[`StaticPairList`](#static-pair-list)交易对列表处理器定义）和动态交易对列表（由[`VolumePairList`](#volume-pair-list)和[`PercentChangePairList`](#percent-change-pair-list)交易对列表处理器定义）。\n\n此外，[`AgeFilter`](#agefilter)、[`PrecisionFilter`](#precisionfilter)、[`PriceFilter`](#pricefilter)、[`ShuffleFilter`](#shufflefilter)、[`SpreadFilter`](#spreadfilter)和[`VolatilityFilter`](#volatilityfilter)作为交易对列表过滤器，用于移除某些交易对和/或调整它们在交易对列表中的位置。\n\n如果使用多个交易对列表处理器，它们会被链式调用，所有交易对列表处理器的组合形成机器人用于交易和回测的最终交易对列表。交易对列表处理器按照配置的顺序执行。您可以将`StaticPairList`、`VolumePairList`、`ProducerPairList`、`RemotePairList`、`MarketCapPairList`或`PercentChangePairList`定义为起始交易对列表处理器。\n\n非活跃市场会始终从最终交易对列表中移除。明确列入黑名单的交易对（配置中`pair_blacklist`设置中的交易对）也会始终从最终交易对列表中移除。\n\n### 交易对黑名单\n\n交易对黑名单（通过配置中的`exchange.pair_blacklist`配置）禁止交易某些交易对。\n这可以简单到排除`DOGE/BTC`——这将精确移除该交易对。\n\n交易对黑名单还支持通配符（正则表达式风格）——因此`BNB/.*`将排除所有以BNB开头的交易对。\n您也可以使用类似`.*DOWN/BTC`或`.*UP/BTC`的模式来排除杠杆代币（请检查您交易所的交易对命名规则！）\n\n### 可用的交易对列表处理器\n\n* [`StaticPairList`](#static-pair-list)（默认，如果未配置其他处理器）\n* [`VolumePairList`](#volume-pair-list)\n* [`PercentChangePairList`](#percent-change-pair-list)\n* [`ProducerPairList`](#producerpairlist)\n* [`RemotePairList`](#remotepairlist)\n* [`MarketCapPairList`](#marketcappairlist)\n* [`AgeFilter`](#agefilter)\n* [`FullTradesFilter`](#fulltradesfilter)\n* [`OffsetFilter`](#offsetfilter)\n* [`PerformanceFilter`](#performancefilter)\n* [`PrecisionFilter`](#precisionfilter)\n* [`PriceFilter`](#pricefilter)\n* [`ShuffleFilter`](#shufflefilter)\n* [`SpreadFilter`](#spreadfilter)\n* [`RangeStabilityFilter`](#rangestabilityfilter)\n* [`VolatilityFilter`](#volatilityfilter)\n\n!!! 提示 \"测试交易对列表\"\n    交易对列表配置可能比较复杂，难以正确设置。最好使用[`test-pairlist`](utils.md#test-pairlist)工具子命令来快速测试您的配置。\n\n#### 静态交易对列表\n\n默认情况下，使用`StaticPairList`方法，该方法使用配置中静态定义的交易对白名单。交易对列表还支持通配符（正则表达式风格）——因此`.*/BTC`将包含所有以BTC为基础货币的交易对。\n\n它使用`exchange.pair_whitelist`和`exchange.pair_blacklist`中的配置，在以下示例中，将交易BTC/USDT和ETH/USDT，并阻止BNB/USDT交易。\n\n`pair_*list`参数均支持正则表达式——因此像`.*/USDT`这样的值将启用所有不在黑名单中的交易对。\n`PercentChangePairList` 不支持回测模式。\n\n#### ProducerPairList\n\n使用 `ProducerPairList`，您可以重用来自 [生产者](producer-consumer.md) 的交易对列表，而无需在每个消费者上显式定义交易对列表。\n\n此交易对列表需要 [消费者模式](producer-consumer.md) 才能正常工作。\n\n该交易对列表会根据当前交易所配置检查活跃交易对，以避免尝试在无效市场上交易。\n\n您可以使用可选参数 `number_assets` 限制交易对列表的长度。使用 `\"number_assets\"=0` 或省略此键将重用当前设置下所有有效的生产者交易对。\n此选项默认禁用，仅当设置为 > 0 时才会生效。\n\n`max_price` 设置会移除价格高于指定价格的交易对。如果您只想交易低价交易对，此设置非常有用。\n此选项默认禁用，仅当设置为 > 0 时才会生效。\n\n`max_value` 设置会移除最小价值变动高于指定值的交易对。\n当交易所存在不平衡的限制时，此设置非常有用。例如，如果步长 = 1（因此您只能购买 1、2 或 3 个币，而不能购买 1.1 个币），且价格相当高（如 20 美元），因为自上次限制调整以来币价已大幅上涨。\n上述情况导致您只能以 20 美元或 40 美元购买，而不能以 25 美元购买。\n在从接收货币中扣除费用的交易所（例如币安）上，这可能导致高价值的币种/数量因金额略低于限制而无法卖出。\n\n`low_price_ratio` 设置会移除 1 个价格单位（点）的涨幅超过 `low_price_ratio` 比率的交易对。\n此选项默认禁用，仅当设置为 > 0 时才会生效。\n\n对于 `PriceFilter`，必须至少应用其 `min_price`、`max_price` 或 `low_price_ratio` 设置中的一项。\n\n计算示例：\n\nSHITCOIN/BTC 的最低价格精度为 8 位小数。如果其价格为 0.00000011，那么上涨一个价格步长后为 0.00000012，比之前的价格高出约 9%。您可以通过使用 `low_price_ratio` 设置为 0.09（9%）的 PriceFilter，或相应地将 `min_price` 设置为 0.00000011 来过滤掉此交易对。\n\n!!! Warning \"低价交易对\"\n    具有高“1 点波动”的低价交易对很危险，因为它们通常流动性差，且可能无法设置理想的止损，这往往会导致高额损失，因为价格需要四舍五入到下一个可交易价格——因此，原本设置的 -5% 止损可能会因价格四舍五入而最终变成 -9% 的止损。\n\n#### ShuffleFilter（随机排序过滤器）\n\n对交易对列表中的交易对进行随机打乱。当您希望所有交易对被同等对待时，此过滤器可用于防止机器人更频繁地交易某些交易对。\n\n默认情况下，ShuffleFilter 每根K线打乱一次交易对。\n要在每次迭代时打乱，请将 `\"shuffle_frequency\"` 设置为 `\"iteration\"`，而不是默认的 `\"candle\"`。",
    "timestamp": "2025-07-31T05:46:39.359037"
  }
}